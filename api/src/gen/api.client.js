// @generated by protobuf-ts 2.9.6 with parameter output_javascript
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import { QuartzAPI } from "./api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service api.QuartzAPI
 */
export class QuartzAPIClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = QuartzAPI.typeName;
        this.methods = QuartzAPI.methods;
        this.options = QuartzAPI.options;
    }
    /**
     * GetPredictedTimeseriesRequest is a request for a set of predicted yields for one or more locations.
     * The response is a stream of GetPredictedTimeseriesResponse messages.
     * each containing the predicted yields for a single location.
     *
     * @generated from protobuf rpc: GetPredictedTimeseries(api.GetPredictedTimeseriesRequest) returns (stream api.GetPredictedTimeseriesResponse);
     */
    getPredictedTimeseries(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetActualTimeseriesRequest is a request for a set of actual yields for one or more locations.
     * The response is a stream of GetActualTimeseriesResponse messages.
     * each containing the actual yields for a single location.
     *
     * @generated from protobuf rpc: GetActualTimeseries(api.GetActualTimeseriesRequest) returns (stream api.GetActualTimeseriesResponse);
     */
    getActualTimeseries(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetPredictedCrossSectionRequest is a request for a specific predicted yield for one or more locations
     * at a single timestamp. The response is a GetPredictedCrossSectionResponse message containing the
     * predicted yields for each location.
     *
     * @generated from protobuf rpc: GetActualCrossSection(api.GetActualCrossSectionRequest) returns (api.GetActualCrossSectionResponse);
     */
    getActualCrossSection(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GetActualCrossSectionRequest is a request for a specific actual yield for one or more locations
     * at a single timestamp. The response is a GetActualCrossSectionResponse message containing the
     * actual yields for each location.
     *
     * @generated from protobuf rpc: GetPredictedCrossSection(api.GetPredictedCrossSectionRequest) returns (api.GetPredictedCrossSectionResponse);
     */
    getPredictedCrossSection(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GetLocationMetadataRequest is a request for the metadata for a single location.
     * The response is a GetLocationMetadataResponse message containing the metadata for the location.
     *
     * @generated from protobuf rpc: GetLocationMetadata(api.GetLocationMetadataRequest) returns (api.GetLocationMetadataResponse);
     */
    getLocationMetadata(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
