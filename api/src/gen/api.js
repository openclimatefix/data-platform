// @generated by protobuf-ts 2.9.6 with parameter output_javascript
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.6 with parameter output_javascript
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum api.LocationType
 */
export var LocationType;
(function (LocationType) {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    LocationType[LocationType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from protobuf enum value: SITE = 1;
     */
    LocationType[LocationType["SITE"] = 1] = "SITE";
    /**
     * @generated from protobuf enum value: REGION = 2;
     */
    LocationType[LocationType["REGION"] = 2] = "REGION";
})(LocationType || (LocationType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class GetPredictedTimeseriesRequest$Type extends MessageType {
    constructor() {
        super("api.GetPredictedTimeseriesRequest", [
            { no: 1, name: "locationIDs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationIDs = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string locationIDs */ 1:
                    message.locationIDs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string locationIDs = 1; */
        for (let i = 0; i < message.locationIDs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.locationIDs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetPredictedTimeseriesRequest
 */
export const GetPredictedTimeseriesRequest = new GetPredictedTimeseriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPredictedTimeseriesResponse$Type extends MessageType {
    constructor() {
        super("api.GetPredictedTimeseriesResponse", [
            { no: 1, name: "locationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PredictedYield }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationID = "";
        message.yields = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationID */ 1:
                    message.locationID = reader.string();
                    break;
                case /* repeated api.PredictedYield yields */ 2:
                    message.yields.push(PredictedYield.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string locationID = 1; */
        if (message.locationID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationID);
        /* repeated api.PredictedYield yields = 2; */
        for (let i = 0; i < message.yields.length; i++)
            PredictedYield.internalBinaryWrite(message.yields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetPredictedTimeseriesResponse
 */
export const GetPredictedTimeseriesResponse = new GetPredictedTimeseriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PredictedYield$Type extends MessageType {
    constructor() {
        super("api.PredictedYield", [
            { no: 1, name: "yield_kw", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "timestamp_unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "uncertainty", kind: "message", T: () => PredictedYieldUncertainty }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.yieldKw = 0;
        message.timestampUnix = 0n;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 yield_kw */ 1:
                    message.yieldKw = reader.int32();
                    break;
                case /* int64 timestamp_unix */ 2:
                    message.timestampUnix = reader.int64().toBigInt();
                    break;
                case /* api.PredictedYieldUncertainty uncertainty */ 3:
                    message.uncertainty = PredictedYieldUncertainty.internalBinaryRead(reader, reader.uint32(), options, message.uncertainty);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 yield_kw = 1; */
        if (message.yieldKw !== 0)
            writer.tag(1, WireType.Varint).int32(message.yieldKw);
        /* int64 timestamp_unix = 2; */
        if (message.timestampUnix !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestampUnix);
        /* api.PredictedYieldUncertainty uncertainty = 3; */
        if (message.uncertainty)
            PredictedYieldUncertainty.internalBinaryWrite(message.uncertainty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.PredictedYield
 */
export const PredictedYield = new PredictedYield$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PredictedYieldUncertainty$Type extends MessageType {
    constructor() {
        super("api.PredictedYieldUncertainty", [
            { no: 1, name: "lower_kw", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "upper_kw", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.lowerKw = 0;
        message.upperKw = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lower_kw */ 1:
                    message.lowerKw = reader.int32();
                    break;
                case /* int32 upper_kw */ 2:
                    message.upperKw = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 lower_kw = 1; */
        if (message.lowerKw !== 0)
            writer.tag(1, WireType.Varint).int32(message.lowerKw);
        /* int32 upper_kw = 2; */
        if (message.upperKw !== 0)
            writer.tag(2, WireType.Varint).int32(message.upperKw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.PredictedYieldUncertainty
 */
export const PredictedYieldUncertainty = new PredictedYieldUncertainty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActualTimeseriesRequest$Type extends MessageType {
    constructor() {
        super("api.GetActualTimeseriesRequest", [
            { no: 1, name: "locationIDs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationIDs = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string locationIDs */ 1:
                    message.locationIDs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string locationIDs = 1; */
        for (let i = 0; i < message.locationIDs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.locationIDs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetActualTimeseriesRequest
 */
export const GetActualTimeseriesRequest = new GetActualTimeseriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActualTimeseriesResponse$Type extends MessageType {
    constructor() {
        super("api.GetActualTimeseriesResponse", [
            { no: 1, name: "locationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ActualYield }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationID = "";
        message.yields = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationID */ 1:
                    message.locationID = reader.string();
                    break;
                case /* repeated api.ActualYield yields */ 2:
                    message.yields.push(ActualYield.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string locationID = 1; */
        if (message.locationID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationID);
        /* repeated api.ActualYield yields = 2; */
        for (let i = 0; i < message.yields.length; i++)
            ActualYield.internalBinaryWrite(message.yields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetActualTimeseriesResponse
 */
export const GetActualTimeseriesResponse = new GetActualTimeseriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActualYield$Type extends MessageType {
    constructor() {
        super("api.ActualYield", [
            { no: 1, name: "yield_kw", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "timestamp_unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.yieldKw = 0;
        message.timestampUnix = 0n;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 yield_kw */ 1:
                    message.yieldKw = reader.int32();
                    break;
                case /* int64 timestamp_unix */ 2:
                    message.timestampUnix = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 yield_kw = 1; */
        if (message.yieldKw !== 0)
            writer.tag(1, WireType.Varint).int32(message.yieldKw);
        /* int64 timestamp_unix = 2; */
        if (message.timestampUnix !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestampUnix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.ActualYield
 */
export const ActualYield = new ActualYield$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPredictedCrossSectionRequest$Type extends MessageType {
    constructor() {
        super("api.GetPredictedCrossSectionRequest", [
            { no: 1, name: "locationIDs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp_unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationIDs = [];
        message.timestampUnix = 0n;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string locationIDs */ 1:
                    message.locationIDs.push(reader.string());
                    break;
                case /* int64 timestamp_unix */ 2:
                    message.timestampUnix = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string locationIDs = 1; */
        for (let i = 0; i < message.locationIDs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.locationIDs[i]);
        /* int64 timestamp_unix = 2; */
        if (message.timestampUnix !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestampUnix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetPredictedCrossSectionRequest
 */
export const GetPredictedCrossSectionRequest = new GetPredictedCrossSectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPredictedCrossSectionResponse$Type extends MessageType {
    constructor() {
        super("api.GetPredictedCrossSectionResponse", [
            { no: 1, name: "timestamp_unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "yields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PredictedYieldAtLocation }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.timestampUnix = 0n;
        message.yields = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp_unix */ 1:
                    message.timestampUnix = reader.int64().toBigInt();
                    break;
                case /* repeated api.PredictedYieldAtLocation yields */ 2:
                    message.yields.push(PredictedYieldAtLocation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 timestamp_unix = 1; */
        if (message.timestampUnix !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestampUnix);
        /* repeated api.PredictedYieldAtLocation yields = 2; */
        for (let i = 0; i < message.yields.length; i++)
            PredictedYieldAtLocation.internalBinaryWrite(message.yields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetPredictedCrossSectionResponse
 */
export const GetPredictedCrossSectionResponse = new GetPredictedCrossSectionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PredictedYieldAtLocation$Type extends MessageType {
    constructor() {
        super("api.PredictedYieldAtLocation", [
            { no: 1, name: "locationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yield_kw", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "uncertainty", kind: "message", T: () => PredictedYieldUncertainty }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationID = "";
        message.yieldKw = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationID */ 1:
                    message.locationID = reader.string();
                    break;
                case /* int32 yield_kw */ 2:
                    message.yieldKw = reader.int32();
                    break;
                case /* api.PredictedYieldUncertainty uncertainty */ 3:
                    message.uncertainty = PredictedYieldUncertainty.internalBinaryRead(reader, reader.uint32(), options, message.uncertainty);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string locationID = 1; */
        if (message.locationID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationID);
        /* int32 yield_kw = 2; */
        if (message.yieldKw !== 0)
            writer.tag(2, WireType.Varint).int32(message.yieldKw);
        /* api.PredictedYieldUncertainty uncertainty = 3; */
        if (message.uncertainty)
            PredictedYieldUncertainty.internalBinaryWrite(message.uncertainty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.PredictedYieldAtLocation
 */
export const PredictedYieldAtLocation = new PredictedYieldAtLocation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActualCrossSectionRequest$Type extends MessageType {
    constructor() {
        super("api.GetActualCrossSectionRequest", [
            { no: 1, name: "locationIDs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp_unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationIDs = [];
        message.timestampUnix = 0n;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string locationIDs */ 1:
                    message.locationIDs.push(reader.string());
                    break;
                case /* int64 timestamp_unix */ 2:
                    message.timestampUnix = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string locationIDs = 1; */
        for (let i = 0; i < message.locationIDs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.locationIDs[i]);
        /* int64 timestamp_unix = 2; */
        if (message.timestampUnix !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestampUnix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetActualCrossSectionRequest
 */
export const GetActualCrossSectionRequest = new GetActualCrossSectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActualCrossSectionResponse$Type extends MessageType {
    constructor() {
        super("api.GetActualCrossSectionResponse", [
            { no: 1, name: "timestamp_unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "yields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ActualYieldAtLocation }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.timestampUnix = 0n;
        message.yields = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp_unix */ 1:
                    message.timestampUnix = reader.int64().toBigInt();
                    break;
                case /* repeated api.ActualYieldAtLocation yields */ 2:
                    message.yields.push(ActualYieldAtLocation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 timestamp_unix = 1; */
        if (message.timestampUnix !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestampUnix);
        /* repeated api.ActualYieldAtLocation yields = 2; */
        for (let i = 0; i < message.yields.length; i++)
            ActualYieldAtLocation.internalBinaryWrite(message.yields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetActualCrossSectionResponse
 */
export const GetActualCrossSectionResponse = new GetActualCrossSectionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActualYieldAtLocation$Type extends MessageType {
    constructor() {
        super("api.ActualYieldAtLocation", [
            { no: 1, name: "locationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yield_kw", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationID = "";
        message.yieldKw = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationID */ 1:
                    message.locationID = reader.string();
                    break;
                case /* int32 yield_kw */ 2:
                    message.yieldKw = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string locationID = 1; */
        if (message.locationID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationID);
        /* int32 yield_kw = 2; */
        if (message.yieldKw !== 0)
            writer.tag(2, WireType.Varint).int32(message.yieldKw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.ActualYieldAtLocation
 */
export const ActualYieldAtLocation = new ActualYieldAtLocation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLocationMetadataRequest$Type extends MessageType {
    constructor() {
        super("api.GetLocationMetadataRequest", [
            { no: 1, name: "locationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationID = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationID */ 1:
                    message.locationID = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string locationID = 1; */
        if (message.locationID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetLocationMetadataRequest
 */
export const GetLocationMetadataRequest = new GetLocationMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLocationMetadataResponse$Type extends MessageType {
    constructor() {
        super("api.GetLocationMetadataResponse", [
            { no: 1, name: "locationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "locationType", kind: "enum", T: () => ["api.LocationType", LocationType] },
            { no: 3, name: "siteMetadata", kind: "message", T: () => SiteLocationMetadata },
            { no: 4, name: "regionMetadata", kind: "message", T: () => RegionLocationMetadata },
            { no: 5, name: "nationMetadata", kind: "message", T: () => NationLocationMetadata }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.locationID = "";
        message.locationType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationID */ 1:
                    message.locationID = reader.string();
                    break;
                case /* api.LocationType locationType */ 2:
                    message.locationType = reader.int32();
                    break;
                case /* api.SiteLocationMetadata siteMetadata */ 3:
                    message.siteMetadata = SiteLocationMetadata.internalBinaryRead(reader, reader.uint32(), options, message.siteMetadata);
                    break;
                case /* api.RegionLocationMetadata regionMetadata */ 4:
                    message.regionMetadata = RegionLocationMetadata.internalBinaryRead(reader, reader.uint32(), options, message.regionMetadata);
                    break;
                case /* api.NationLocationMetadata nationMetadata */ 5:
                    message.nationMetadata = NationLocationMetadata.internalBinaryRead(reader, reader.uint32(), options, message.nationMetadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string locationID = 1; */
        if (message.locationID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationID);
        /* api.LocationType locationType = 2; */
        if (message.locationType !== 0)
            writer.tag(2, WireType.Varint).int32(message.locationType);
        /* api.SiteLocationMetadata siteMetadata = 3; */
        if (message.siteMetadata)
            SiteLocationMetadata.internalBinaryWrite(message.siteMetadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* api.RegionLocationMetadata regionMetadata = 4; */
        if (message.regionMetadata)
            RegionLocationMetadata.internalBinaryWrite(message.regionMetadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* api.NationLocationMetadata nationMetadata = 5; */
        if (message.nationMetadata)
            NationLocationMetadata.internalBinaryWrite(message.nationMetadata, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.GetLocationMetadataResponse
 */
export const GetLocationMetadataResponse = new GetLocationMetadataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SiteLocationMetadata$Type extends MessageType {
    constructor() {
        super("api.SiteLocationMetadata", [
            { no: 2, name: "latitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "longitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "orientation_deg", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "tilt_deg", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "capacity_kw", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.latitude = 0;
        message.longitude = 0;
        message.orientationDeg = 0;
        message.tiltDeg = 0;
        message.capacityKw = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float latitude */ 2:
                    message.latitude = reader.float();
                    break;
                case /* float longitude */ 3:
                    message.longitude = reader.float();
                    break;
                case /* int32 orientation_deg */ 4:
                    message.orientationDeg = reader.int32();
                    break;
                case /* int32 tilt_deg */ 5:
                    message.tiltDeg = reader.int32();
                    break;
                case /* int32 capacity_kw */ 6:
                    message.capacityKw = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float latitude = 2; */
        if (message.latitude !== 0)
            writer.tag(2, WireType.Bit32).float(message.latitude);
        /* float longitude = 3; */
        if (message.longitude !== 0)
            writer.tag(3, WireType.Bit32).float(message.longitude);
        /* int32 orientation_deg = 4; */
        if (message.orientationDeg !== 0)
            writer.tag(4, WireType.Varint).int32(message.orientationDeg);
        /* int32 tilt_deg = 5; */
        if (message.tiltDeg !== 0)
            writer.tag(5, WireType.Varint).int32(message.tiltDeg);
        /* int32 capacity_kw = 6; */
        if (message.capacityKw !== 0)
            writer.tag(6, WireType.Varint).int32(message.capacityKw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.SiteLocationMetadata
 */
export const SiteLocationMetadata = new SiteLocationMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegionLocationMetadata$Type extends MessageType {
    constructor() {
        super("api.RegionLocationMetadata", [
            { no: 1, name: "regionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "gspName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "capacity_kw", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.regionName = "";
        message.gspName = "";
        message.capacityKw = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string regionName */ 1:
                    message.regionName = reader.string();
                    break;
                case /* string gspName */ 2:
                    message.gspName = reader.string();
                    break;
                case /* string capacity_kw */ 3:
                    message.capacityKw = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string regionName = 1; */
        if (message.regionName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.regionName);
        /* string gspName = 2; */
        if (message.gspName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gspName);
        /* string capacity_kw = 3; */
        if (message.capacityKw !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.capacityKw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.RegionLocationMetadata
 */
export const RegionLocationMetadata = new RegionLocationMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NationLocationMetadata$Type extends MessageType {
    constructor() {
        super("api.NationLocationMetadata", [
            { no: 1, name: "nationName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "capacity_kw", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.nationName = "";
        message.capacityKw = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nationName */ 1:
                    message.nationName = reader.string();
                    break;
                case /* string capacity_kw */ 2:
                    message.capacityKw = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string nationName = 1; */
        if (message.nationName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nationName);
        /* string capacity_kw = 2; */
        if (message.capacityKw !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.capacityKw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.NationLocationMetadata
 */
export const NationLocationMetadata = new NationLocationMetadata$Type();
/**
 * @generated ServiceType for protobuf service api.QuartzAPI
 */
export const QuartzAPI = new ServiceType("api.QuartzAPI", [
    { name: "GetPredictedTimeseries", serverStreaming: true, options: {}, I: GetPredictedTimeseriesRequest, O: GetPredictedTimeseriesResponse },
    { name: "GetActualTimeseries", serverStreaming: true, options: {}, I: GetActualTimeseriesRequest, O: GetActualTimeseriesResponse },
    { name: "GetActualCrossSection", options: {}, I: GetActualCrossSectionRequest, O: GetActualCrossSectionResponse },
    { name: "GetPredictedCrossSection", options: {}, I: GetPredictedCrossSectionRequest, O: GetPredictedCrossSectionResponse },
    { name: "GetLocationMetadata", options: {}, I: GetLocationMetadataRequest, O: GetLocationMetadataResponse }
]);
