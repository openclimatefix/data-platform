# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: fcfs/service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator

import betterproto
import grpclib

from .fcfs import messages


class QuartzAPIStub(betterproto.ServiceStub):
    async def get_predicted_timeseries(
        self,
    ) -> AsyncGenerator[messages.GetPredictedTimeseriesResponse, None]:
        request = messages.GetPredictedTimeseriesRequest()

        async for response in self._unary_stream(
            "/fcfs.QuartzAPI/GetPredictedTimeseries",
            request,
            messages.GetPredictedTimeseriesResponse,
        ):
            yield response

    async def get_actual_timeseries(
        self,
    ) -> AsyncGenerator[messages.GetActualTimeseriesResponse, None]:
        request = messages.GetActualTimeseriesRequest()

        async for response in self._unary_stream(
            "/fcfs.QuartzAPI/GetActualTimeseries",
            request,
            messages.GetActualTimeseriesResponse,
        ):
            yield response

    async def get_actual_cross_section(self) -> messages.GetActualCrossSectionResponse:
        request = messages.GetActualCrossSectionRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/GetActualCrossSection",
            request,
            messages.GetActualCrossSectionResponse,
        )

    async def get_predicted_cross_section(
        self,
    ) -> messages.GetPredictedCrossSectionResponse:
        request = messages.GetPredictedCrossSectionRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/GetPredictedCrossSection",
            request,
            messages.GetPredictedCrossSectionResponse,
        )

    async def create_solar_site(self) -> messages.CreateLocationResponse:
        request = messages.CreateSiteRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/CreateSolarSite",
            request,
            messages.CreateLocationResponse,
        )

    async def create_solar_gsp(self) -> messages.CreateLocationResponse:
        request = messages.CreateGspRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/CreateSolarGsp",
            request,
            messages.CreateLocationResponse,
        )

    async def get_solar_site(self) -> messages.GetLocationResponse:
        request = messages.GetLocationRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/GetSolarSite",
            request,
            messages.GetLocationResponse,
        )

    async def get_solar_gsp(self) -> messages.GetLocationResponse:
        request = messages.GetLocationRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/GetSolarGsp",
            request,
            messages.GetLocationResponse,
        )

    async def create_model(self) -> messages.CreateModelResponse:
        request = messages.CreateModelRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/CreateModel",
            request,
            messages.CreateModelResponse,
        )

    async def create_solar_forecasts(self) -> messages.CreateForecastsResponse:
        request = messages.CreateForecastsRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/CreateSolarForecasts",
            request,
            messages.CreateForecastsResponse,
        )

    async def create_predicted_generation_values_request(
        self,
    ) -> messages.CreatePredictedGenerationValuesResponse:
        request = messages.CreatePredictedGenerationValuesRequest()

        return await self._unary_unary(
            "/fcfs.QuartzAPI/CreatePredictedGenerationValuesRequest",
            request,
            messages.CreatePredictedGenerationValuesResponse,
        )
