// @generated by protobuf-ts 2.9.6 with parameter output_javascript
// @generated from protobuf file "fcfs/service.proto" (package "fcfs", syntax proto3)
// tslint:disable
import { QuartzAPI } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fcfs.QuartzAPI
 */
export class QuartzAPIClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = QuartzAPI.typeName;
        this.methods = QuartzAPI.methods;
        this.options = QuartzAPI.options;
    }
    // --- QuartzUI ----------------------------------------------------------------
    /**
     * @generated from protobuf rpc: GetPredictedTimeseries(fcfs.messages.GetPredictedTimeseriesRequest) returns (stream fcfs.messages.GetPredictedTimeseriesResponse);
     */
    getPredictedTimeseries(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetActualTimeseries(fcfs.messages.GetActualTimeseriesRequest) returns (stream fcfs.messages.GetActualTimeseriesResponse);
     */
    getActualTimeseries(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetActualCrossSection(fcfs.messages.GetActualCrossSectionRequest) returns (fcfs.messages.GetActualCrossSectionResponse);
     */
    getActualCrossSection(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPredictedCrossSection(fcfs.messages.GetPredictedCrossSectionRequest) returns (fcfs.messages.GetPredictedCrossSectionResponse);
     */
    getPredictedCrossSection(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    // --- Locations ----------------------------------------------------------------
    // These could be split as they are, with a procedure for each type of location
    // or, they could be combined into a single procedure with a type field in the message
    /**
     * @generated from protobuf rpc: CreateSolarSite(fcfs.messages.CreateSiteRequest) returns (fcfs.messages.CreateLocationResponse);
     */
    createSolarSite(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateSolarGsp(fcfs.messages.CreateGspRequest) returns (fcfs.messages.CreateLocationResponse);
     */
    createSolarGsp(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSolarSite(fcfs.messages.GetLocationRequest) returns (fcfs.messages.GetLocationResponse);
     */
    getSolarSite(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSolarGsp(fcfs.messages.GetLocationRequest) returns (fcfs.messages.GetLocationResponse);
     */
    getSolarGsp(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    // --- Predictions ---------------------------------------------------------------
    /**
     * @generated from protobuf rpc: CreateModel(fcfs.messages.CreateModelRequest) returns (fcfs.messages.CreateModelResponse);
     */
    createModel(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateSolarForecasts(fcfs.messages.CreateForecastsRequest) returns (fcfs.messages.CreateForecastsResponse);
     */
    createSolarForecasts(input, options) {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreatePredictedGenerationValuesRequest(fcfs.messages.CreatePredictedGenerationValuesRequest) returns (fcfs.messages.CreatePredictedGenerationValuesResponse);
     */
    createPredictedGenerationValuesRequest(input, options) {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
