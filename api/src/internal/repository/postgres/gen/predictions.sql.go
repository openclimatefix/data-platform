// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: predictions.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createForecast = `-- name: CreateForecast :one
INSERT INTO pred.forecasts(
    source_type_id, location_id, model_id, init_time_utc
) VALUES (
    (SELECT source_type_id FROM loc.source_types WHERE source_type_name = $2), $1, $3, $4
) RETURNING forecast_id
`

type CreateForecastParams struct {
	LocationID     int32
	SourceTypeName string
	ModelID        int32
	InitTimeUtc    pgtype.Timestamp
}

func (q *Queries) CreateForecast(ctx context.Context, arg CreateForecastParams) (int32, error) {
	row := q.db.QueryRow(ctx, createForecast,
		arg.LocationID,
		arg.SourceTypeName,
		arg.ModelID,
		arg.InitTimeUtc,
	)
	var forecast_id int32
	err := row.Scan(&forecast_id)
	return forecast_id, err
}

const createModel = `-- name: CreateModel :one
INSERT INTO pred.models (name, version) VALUES (
    $1, $2
) RETURNING model_id
`

type CreateModelParams struct {
	Name    string
	Version string
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (int32, error) {
	row := q.db.QueryRow(ctx, createModel, arg.Name, arg.Version)
	var model_id int32
	err := row.Scan(&model_id)
	return model_id, err
}

type CreatePredictedGenerationValuesParams struct {
	HorizonMins   int16
	P10           *int16
	P50           int16
	P90           *int16
	ForecastID    int32
	LocationID    int32
	TargetTimeUtc pgtype.Timestamp
	Metadata      []byte
}

const getMinHorizonPredictedGenerationValuesForLocation = `-- name: GetMinHorizonPredictedGenerationValuesForLocation :many
WITH ranked_predictions AS (
    SELECT
        pgv.target_time_utc,
        pgv.p10,
        pgv.p50,
        pgv.p90,
        pgv.horizon_mins,
        pgv.forecast_id,
        ROW_NUMBER() OVER (PARTITION BY pgv.target_time_utc ORDER BY pgv.horizon_mins ASC) as rn
    FROM
        pred.predicted_generation_values pgv
    WHERE
        pgv.location_id = $1
        AND pgv.target_time_utc >= CURRENT_TIMESTAMP - make_interval(hours => 36)
)
SELECT
    rp.target_time_utc,
    rp.p10,
    rp.p50,
    rp.p90,
    rp.horizon_mins,
    rp.forecast_id
FROM ranked_predictions rp
WHERE rp.rn = 1
ORDER BY rp.target_time_utc ASC
`

type GetMinHorizonPredictedGenerationValuesForLocationRow struct {
	TargetTimeUtc pgtype.Timestamp
	P10           *int16
	P50           int16
	P90           *int16
	HorizonMins   int16
	ForecastID    int32
}

func (q *Queries) GetMinHorizonPredictedGenerationValuesForLocation(ctx context.Context, locationID int32) ([]GetMinHorizonPredictedGenerationValuesForLocationRow, error) {
	rows, err := q.db.Query(ctx, getMinHorizonPredictedGenerationValuesForLocation, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMinHorizonPredictedGenerationValuesForLocationRow{}
	for rows.Next() {
		var i GetMinHorizonPredictedGenerationValuesForLocationRow
		if err := rows.Scan(
			&i.TargetTimeUtc,
			&i.P10,
			&i.P50,
			&i.P90,
			&i.HorizonMins,
			&i.ForecastID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
