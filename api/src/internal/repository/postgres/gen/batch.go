// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package gen

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchCreateForecasts = `-- name: BatchCreateForecasts :batchone
INSERT INTO pred.forecasts(
    source_type_id, location_id, model_id, init_time_utc
) VALUES (
    (SELECT source_type_id FROM loc.source_types WHERE source_type_name = $2),
    $1, $3, $4
) RETURNING source_type_id, forecast_id, location_id, model_id, init_time_utc
`

type BatchCreateForecastsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchCreateForecastsParams struct {
	LocationID     int32
	SourceTypeName string
	ModelID        int32
	InitTimeUtc    pgtype.Timestamp
}

func (q *Queries) BatchCreateForecasts(ctx context.Context, arg []BatchCreateForecastsParams) *BatchCreateForecastsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.LocationID,
			a.SourceTypeName,
			a.ModelID,
			a.InitTimeUtc,
		}
		batch.Queue(batchCreateForecasts, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchCreateForecastsBatchResults{br, len(arg), false}
}

func (b *BatchCreateForecastsBatchResults) QueryRow(f func(int, PredForecast, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i PredForecast
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.SourceTypeID,
			&i.ForecastID,
			&i.LocationID,
			&i.ModelID,
			&i.InitTimeUtc,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *BatchCreateForecastsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchCreateObservations = `-- name: BatchCreateObservations :batchexec
INSERT INTO obs.observed_generation_values (
    location_id, source_type_id, observer_id, observation_time_utc, value
) VALUES (
    $1, (SELECT source_type_id FROM loc.source_types WHERE source_type_name = $2), $3, $4,
    encode_pct($5::real)
)
`

type BatchCreateObservationsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchCreateObservationsParams struct {
	LocationID         int32
	SourceTypeName     string
	ObserverID         int32
	ObservationTimeUtc pgtype.Timestamp
	YieldPct           float32
}

func (q *Queries) BatchCreateObservations(ctx context.Context, arg []BatchCreateObservationsParams) *BatchCreateObservationsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.LocationID,
			a.SourceTypeName,
			a.ObserverID,
			a.ObservationTimeUtc,
			a.YieldPct,
		}
		batch.Queue(batchCreateObservations, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchCreateObservationsBatchResults{br, len(arg), false}
}

func (b *BatchCreateObservationsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchCreateObservationsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchCreatePredictedGenerationValues = `-- name: BatchCreatePredictedGenerationValues :batchexec
INSERT INTO pred.predicted_generation_values (
    horizon_mins, p10, p50, p90, forecast_id, target_time_utc, metadata
) VALUES (
    $1::integer,
    encode_pct($2::real),
    encode_pct($3::real),
    encode_pct($4::real),
    $5::integer,
    $6::timestamp,
    $7::jsonb
)
`

type BatchCreatePredictedGenerationValuesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchCreatePredictedGenerationValuesParams struct {
	HorizonMins   int32
	P10Pct        *float32
	P50Pct        float32
	P90Pct        *float32
	ForecastID    int32
	TargetTimeUtc pgtype.Timestamp
	Metadata      []byte
}

func (q *Queries) BatchCreatePredictedGenerationValues(ctx context.Context, arg []BatchCreatePredictedGenerationValuesParams) *BatchCreatePredictedGenerationValuesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.HorizonMins,
			a.P10Pct,
			a.P50Pct,
			a.P90Pct,
			a.ForecastID,
			a.TargetTimeUtc,
			a.Metadata,
		}
		batch.Queue(batchCreatePredictedGenerationValues, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchCreatePredictedGenerationValuesBatchResults{br, len(arg), false}
}

func (b *BatchCreatePredictedGenerationValuesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchCreatePredictedGenerationValuesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
