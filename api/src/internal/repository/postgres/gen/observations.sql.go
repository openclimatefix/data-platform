// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: observations.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createObservation = `-- name: CreateObservation :one
WITH source_type_id AS (
    SELECT source_type_id FROM loc.source_types
    WHERE source_type_name = $2
)
INSERT INTO obs.observed_generation_values (
    location_id, source_type_id, time_utc, value
) VALUES (
    $1, source_type_id, $3, $4
) RETURNING observation_id
`

type CreateObservationParams struct {
	LocationID     int32
	SourceTypeName string
	TimeUtc        pgtype.Timestamp
	Value          int16
}

func (q *Queries) CreateObservation(ctx context.Context, arg CreateObservationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createObservation,
		arg.LocationID,
		arg.SourceTypeName,
		arg.TimeUtc,
		arg.Value,
	)
	var observation_id int32
	err := row.Scan(&observation_id)
	return observation_id, err
}

type CreateObservationsParams struct {
	LocationID   int32
	SourceTypeID int16
	TimeUtc      pgtype.Timestamp
	Value        int16
}

const listObservationsByLocationId = `-- name: ListObservationsByLocationId :many
SELECT value, source_type_id, observation_id, location_id, time_utc FROM obs.observed_generation_values
WHERE location_id = $1
`

func (q *Queries) ListObservationsByLocationId(ctx context.Context, locationID int32) ([]ObsObservedGenerationValue, error) {
	rows, err := q.db.Query(ctx, listObservationsByLocationId, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ObsObservedGenerationValue{}
	for rows.Next() {
		var i ObsObservedGenerationValue
		if err := rows.Scan(
			&i.Value,
			&i.SourceTypeID,
			&i.ObservationID,
			&i.LocationID,
			&i.TimeUtc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
