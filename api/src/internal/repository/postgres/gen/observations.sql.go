// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: observations.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createObservation = `-- name: CreateObservation :exec
INSERT INTO obs.observed_generation_values (
    location_id, source_type_id, observer_id, observation_time_utc, value
) VALUES (
    $1, (SELECT source_type_id FROM loc.source_types WHERE source_type_name = $2), $3, $4, $5
)
`

type CreateObservationParams struct {
	LocationID         int32
	SourceTypeName     string
	ObserverID         int32
	ObservationTimeUtc pgtype.Timestamp
	Value              int16
}

func (q *Queries) CreateObservation(ctx context.Context, arg CreateObservationParams) error {
	_, err := q.db.Exec(ctx, createObservation,
		arg.LocationID,
		arg.SourceTypeName,
		arg.ObserverID,
		arg.ObservationTimeUtc,
		arg.Value,
	)
	return err
}

type CreateObservationsParams struct {
	LocationID         int32
	SourceTypeID       int16
	ObserverID         int32
	ObservationTimeUtc pgtype.Timestamp
	Value              int16
}

const createObserver = `-- name: CreateObserver :one
INSERT INTO obs.observers (observer_name) VALUES ($1) RETURNING observer_id
`

func (q *Queries) CreateObserver(ctx context.Context, observerName string) (int32, error) {
	row := q.db.QueryRow(ctx, createObserver, observerName)
	var observer_id int32
	err := row.Scan(&observer_id)
	return observer_id, err
}

const getObservations = `-- name: GetObservations :many
SELECT
    location_id, source_type_id, observation_time_utc, value
FROM obs.observed_generation_values
WHERE
    location_id = $1
    AND source_type_id = (SELECT source_type_id FROM loc.source_types WHERE source_type_name = $2)
    AND observer_id = (SELECT observer_id FROM obs.observers WHERE observer_name = LOWER($3))
    AND observation_time_utc = ANY($4::timestamp[])
`

type GetObservationsParams struct {
	LocationID         int32
	SourceTypeName     string
	Lower              string
	ObservationTimeUtc []pgtype.Timestamp
}

type GetObservationsRow struct {
	LocationID         int32
	SourceTypeID       int16
	ObservationTimeUtc pgtype.Timestamp
	Value              int16
}

func (q *Queries) GetObservations(ctx context.Context, arg GetObservationsParams) ([]GetObservationsRow, error) {
	rows, err := q.db.Query(ctx, getObservations,
		arg.LocationID,
		arg.SourceTypeName,
		arg.Lower,
		arg.ObservationTimeUtc,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetObservationsRow{}
	for rows.Next() {
		var i GetObservationsRow
		if err := rows.Scan(
			&i.LocationID,
			&i.SourceTypeID,
			&i.ObservationTimeUtc,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObservations = `-- name: ListObservations :many
SELECT
    location_id, source_type_id, observation_time_utc, value
FROM obs.observed_generation_values
WHERE
    location_id = $1
    AND source_type_id = (SELECT source_type_id FROM loc.source_types WHERE source_type_name = $2)
    AND observer_id = (SELECT observer_id FROM obs.observers WHERE observer_name = LOWER($3))
    AND observation_time_utc BETWEEN $4::timestamp AND $5::timestamp
`

type ListObservationsParams struct {
	LocationID     int32
	SourceTypeName string
	Lower          string
	StartTimeUtc   pgtype.Timestamp
	EndTimeUtc     pgtype.Timestamp
}

type ListObservationsRow struct {
	LocationID         int32
	SourceTypeID       int16
	ObservationTimeUtc pgtype.Timestamp
	Value              int16
}

func (q *Queries) ListObservations(ctx context.Context, arg ListObservationsParams) ([]ListObservationsRow, error) {
	rows, err := q.db.Query(ctx, listObservations,
		arg.LocationID,
		arg.SourceTypeName,
		arg.Lower,
		arg.StartTimeUtc,
		arg.EndTimeUtc,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListObservationsRow{}
	for rows.Next() {
		var i ListObservationsRow
		if err := rows.Scan(
			&i.LocationID,
			&i.SourceTypeID,
			&i.ObservationTimeUtc,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObservers = `-- name: ListObservers :many
SELECT
    observer_id, observer_name
FROM obs.observers
`

func (q *Queries) ListObservers(ctx context.Context) ([]ObsObserver, error) {
	rows, err := q.db.Query(ctx, listObservers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ObsObserver{}
	for rows.Next() {
		var i ObsObserver
		if err := rows.Scan(&i.ObserverID, &i.ObserverName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
