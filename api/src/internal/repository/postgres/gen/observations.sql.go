// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: observations.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createObservation = `-- name: CreateObservation :one
INSERT INTO obs.observations (
    location_id, time_utc, generation, generation_unit_prefix_factor
) VALUES (
    $1, $2, $3, $4
) RETURNING observation_id
`

type CreateObservationParams struct {
	LocationID                 int32
	TimeUtc                    pgtype.Timestamp
	Generation                 int16
	GenerationUnitPrefixFactor int16
}

func (q *Queries) CreateObservation(ctx context.Context, arg CreateObservationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createObservation,
		arg.LocationID,
		arg.TimeUtc,
		arg.Generation,
		arg.GenerationUnitPrefixFactor,
	)
	var observation_id int32
	err := row.Scan(&observation_id)
	return observation_id, err
}

type CreateObservationsParams struct {
	LocationID                 int32
	TimeUtc                    pgtype.Timestamp
	Generation                 int16
	GenerationUnitPrefixFactor int16
}

const listObservations = `-- name: ListObservations :many
SELECT
    obs.observations.observation_id,
    obs.observations.location_id,
    obs.observations.time_utc,
    obs.observations.generation,
    obs.observations.generation_unit_prefix_factor
FROM obs.observations
`

func (q *Queries) ListObservations(ctx context.Context) ([]ObsObservation, error) {
	rows, err := q.db.Query(ctx, listObservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ObsObservation{}
	for rows.Next() {
		var i ObsObservation
		if err := rows.Scan(
			&i.ObservationID,
			&i.LocationID,
			&i.TimeUtc,
			&i.Generation,
			&i.GenerationUnitPrefixFactor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
