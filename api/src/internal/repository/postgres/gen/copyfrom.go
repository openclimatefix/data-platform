// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package gen

import (
	"context"
)

// iteratorForCopyCreateObservations implements pgx.CopyFromSource.
type iteratorForCopyCreateObservations struct {
	rows                 []CopyCreateObservationsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCopyCreateObservations) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCopyCreateObservations) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].LocationID,
		r.rows[0].SourceTypeID,
		r.rows[0].ObserverID,
		r.rows[0].ObservationTimeUtc,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCopyCreateObservations) Err() error {
	return nil
}

func (q *Queries) CopyCreateObservations(ctx context.Context, arg []CopyCreateObservationsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"obs", "observed_generation_values"}, []string{"location_id", "source_type_id", "observer_id", "observation_time_utc", "value"}, &iteratorForCopyCreateObservations{rows: arg})
}

// iteratorForCopyCreatePredictedGenerationValues implements pgx.CopyFromSource.
type iteratorForCopyCreatePredictedGenerationValues struct {
	rows                 []CopyCreatePredictedGenerationValuesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCopyCreatePredictedGenerationValues) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCopyCreatePredictedGenerationValues) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].HorizonMins,
		r.rows[0].P10,
		r.rows[0].P50,
		r.rows[0].P90,
		r.rows[0].ForecastID,
		r.rows[0].TargetTimeUtc,
		r.rows[0].Metadata,
	}, nil
}

func (r iteratorForCopyCreatePredictedGenerationValues) Err() error {
	return nil
}

func (q *Queries) CopyCreatePredictedGenerationValues(ctx context.Context, arg []CopyCreatePredictedGenerationValuesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"pred", "predicted_generation_values"}, []string{"horizon_mins", "p10", "p50", "p90", "forecast_id", "target_time_utc", "metadata"}, &iteratorForCopyCreatePredictedGenerationValues{rows: arg})
}
