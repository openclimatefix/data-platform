// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package gen

import (
	"context"
)

// iteratorForCreateObservations implements pgx.CopyFromSource.
type iteratorForCreateObservations struct {
	rows                 []CreateObservationsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateObservations) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateObservations) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].LocationID,
		r.rows[0].SourceTypeID,
		r.rows[0].TimeUtc,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCreateObservations) Err() error {
	return nil
}

func (q *Queries) CreateObservations(ctx context.Context, arg []CreateObservationsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"obs", "observed_generation_values"}, []string{"location_id", "source_type_id", "time_utc", "value"}, &iteratorForCreateObservations{rows: arg})
}
