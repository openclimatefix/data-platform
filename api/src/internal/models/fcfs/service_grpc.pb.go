// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fcfs/service.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuartzAPI_GetPredictedTimeseries_FullMethodName                 = "/fcfs.QuartzAPI/GetPredictedTimeseries"
	QuartzAPI_GetActualTimeseries_FullMethodName                    = "/fcfs.QuartzAPI/GetActualTimeseries"
	QuartzAPI_GetActualCrossSection_FullMethodName                  = "/fcfs.QuartzAPI/GetActualCrossSection"
	QuartzAPI_GetPredictedCrossSection_FullMethodName               = "/fcfs.QuartzAPI/GetPredictedCrossSection"
	QuartzAPI_CreateSolarSite_FullMethodName                        = "/fcfs.QuartzAPI/CreateSolarSite"
	QuartzAPI_CreateSolarGsp_FullMethodName                         = "/fcfs.QuartzAPI/CreateSolarGsp"
	QuartzAPI_GetSolarSite_FullMethodName                           = "/fcfs.QuartzAPI/GetSolarSite"
	QuartzAPI_GetSolarGsp_FullMethodName                            = "/fcfs.QuartzAPI/GetSolarGsp"
	QuartzAPI_CreateModel_FullMethodName                            = "/fcfs.QuartzAPI/CreateModel"
	QuartzAPI_CreateSolarForecasts_FullMethodName                   = "/fcfs.QuartzAPI/CreateSolarForecasts"
	QuartzAPI_CreatePredictedGenerationValuesRequest_FullMethodName = "/fcfs.QuartzAPI/CreatePredictedGenerationValuesRequest"
)

// QuartzAPIClient is the client API for QuartzAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuartzAPIClient interface {
	GetPredictedTimeseries(ctx context.Context, in *GetPredictedTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPredictedTimeseriesResponse], error)
	GetActualTimeseries(ctx context.Context, in *GetActualTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetActualTimeseriesResponse], error)
	GetActualCrossSection(ctx context.Context, in *GetActualCrossSectionRequest, opts ...grpc.CallOption) (*GetActualCrossSectionResponse, error)
	GetPredictedCrossSection(ctx context.Context, in *GetPredictedCrossSectionRequest, opts ...grpc.CallOption) (*GetPredictedCrossSectionResponse, error)
	CreateSolarSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	CreateSolarGsp(ctx context.Context, in *CreateGspRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	GetSolarSite(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	GetSolarGsp(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	CreateSolarForecasts(ctx context.Context, in *CreateForecastsRequest, opts ...grpc.CallOption) (*CreateForecastsResponse, error)
	CreatePredictedGenerationValuesRequest(ctx context.Context, in *CreatePredictedGenerationValuesRequest, opts ...grpc.CallOption) (*CreatePredictedGenerationValuesResponse, error)
}

type quartzAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewQuartzAPIClient(cc grpc.ClientConnInterface) QuartzAPIClient {
	return &quartzAPIClient{cc}
}

func (c *quartzAPIClient) GetPredictedTimeseries(ctx context.Context, in *GetPredictedTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPredictedTimeseriesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuartzAPI_ServiceDesc.Streams[0], QuartzAPI_GetPredictedTimeseries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuartzAPI_GetPredictedTimeseriesClient = grpc.ServerStreamingClient[GetPredictedTimeseriesResponse]

func (c *quartzAPIClient) GetActualTimeseries(ctx context.Context, in *GetActualTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetActualTimeseriesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuartzAPI_ServiceDesc.Streams[1], QuartzAPI_GetActualTimeseries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetActualTimeseriesRequest, GetActualTimeseriesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuartzAPI_GetActualTimeseriesClient = grpc.ServerStreamingClient[GetActualTimeseriesResponse]

func (c *quartzAPIClient) GetActualCrossSection(ctx context.Context, in *GetActualCrossSectionRequest, opts ...grpc.CallOption) (*GetActualCrossSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActualCrossSectionResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetActualCrossSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetPredictedCrossSection(ctx context.Context, in *GetPredictedCrossSectionRequest, opts ...grpc.CallOption) (*GetPredictedCrossSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPredictedCrossSectionResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetPredictedCrossSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateSolarSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateSolarSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateSolarGsp(ctx context.Context, in *CreateGspRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateSolarGsp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetSolarSite(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetSolarSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetSolarGsp(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetSolarGsp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateSolarForecasts(ctx context.Context, in *CreateForecastsRequest, opts ...grpc.CallOption) (*CreateForecastsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateForecastsResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateSolarForecasts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreatePredictedGenerationValuesRequest(ctx context.Context, in *CreatePredictedGenerationValuesRequest, opts ...grpc.CallOption) (*CreatePredictedGenerationValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePredictedGenerationValuesResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreatePredictedGenerationValuesRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuartzAPIServer is the server API for QuartzAPI service.
// All implementations should embed UnimplementedQuartzAPIServer
// for forward compatibility.
type QuartzAPIServer interface {
	GetPredictedTimeseries(*GetPredictedTimeseriesRequest, grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]) error
	GetActualTimeseries(*GetActualTimeseriesRequest, grpc.ServerStreamingServer[GetActualTimeseriesResponse]) error
	GetActualCrossSection(context.Context, *GetActualCrossSectionRequest) (*GetActualCrossSectionResponse, error)
	GetPredictedCrossSection(context.Context, *GetPredictedCrossSectionRequest) (*GetPredictedCrossSectionResponse, error)
	CreateSolarSite(context.Context, *CreateSiteRequest) (*CreateLocationResponse, error)
	CreateSolarGsp(context.Context, *CreateGspRequest) (*CreateLocationResponse, error)
	GetSolarSite(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	GetSolarGsp(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	CreateSolarForecasts(context.Context, *CreateForecastsRequest) (*CreateForecastsResponse, error)
	CreatePredictedGenerationValuesRequest(context.Context, *CreatePredictedGenerationValuesRequest) (*CreatePredictedGenerationValuesResponse, error)
}

// UnimplementedQuartzAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuartzAPIServer struct{}

func (UnimplementedQuartzAPIServer) GetPredictedTimeseries(*GetPredictedTimeseriesRequest, grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPredictedTimeseries not implemented")
}
func (UnimplementedQuartzAPIServer) GetActualTimeseries(*GetActualTimeseriesRequest, grpc.ServerStreamingServer[GetActualTimeseriesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetActualTimeseries not implemented")
}
func (UnimplementedQuartzAPIServer) GetActualCrossSection(context.Context, *GetActualCrossSectionRequest) (*GetActualCrossSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActualCrossSection not implemented")
}
func (UnimplementedQuartzAPIServer) GetPredictedCrossSection(context.Context, *GetPredictedCrossSectionRequest) (*GetPredictedCrossSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictedCrossSection not implemented")
}
func (UnimplementedQuartzAPIServer) CreateSolarSite(context.Context, *CreateSiteRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolarSite not implemented")
}
func (UnimplementedQuartzAPIServer) CreateSolarGsp(context.Context, *CreateGspRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolarGsp not implemented")
}
func (UnimplementedQuartzAPIServer) GetSolarSite(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolarSite not implemented")
}
func (UnimplementedQuartzAPIServer) GetSolarGsp(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolarGsp not implemented")
}
func (UnimplementedQuartzAPIServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedQuartzAPIServer) CreateSolarForecasts(context.Context, *CreateForecastsRequest) (*CreateForecastsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolarForecasts not implemented")
}
func (UnimplementedQuartzAPIServer) CreatePredictedGenerationValuesRequest(context.Context, *CreatePredictedGenerationValuesRequest) (*CreatePredictedGenerationValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePredictedGenerationValuesRequest not implemented")
}
func (UnimplementedQuartzAPIServer) testEmbeddedByValue() {}

// UnsafeQuartzAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuartzAPIServer will
// result in compilation errors.
type UnsafeQuartzAPIServer interface {
	mustEmbedUnimplementedQuartzAPIServer()
}

func RegisterQuartzAPIServer(s grpc.ServiceRegistrar, srv QuartzAPIServer) {
	// If the following call pancis, it indicates UnimplementedQuartzAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuartzAPI_ServiceDesc, srv)
}

func _QuartzAPI_GetPredictedTimeseries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPredictedTimeseriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuartzAPIServer).GetPredictedTimeseries(m, &grpc.GenericServerStream[GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuartzAPI_GetPredictedTimeseriesServer = grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]

func _QuartzAPI_GetActualTimeseries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetActualTimeseriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuartzAPIServer).GetActualTimeseries(m, &grpc.GenericServerStream[GetActualTimeseriesRequest, GetActualTimeseriesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuartzAPI_GetActualTimeseriesServer = grpc.ServerStreamingServer[GetActualTimeseriesResponse]

func _QuartzAPI_GetActualCrossSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActualCrossSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetActualCrossSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetActualCrossSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetActualCrossSection(ctx, req.(*GetActualCrossSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetPredictedCrossSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictedCrossSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetPredictedCrossSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetPredictedCrossSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetPredictedCrossSection(ctx, req.(*GetPredictedCrossSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateSolarSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateSolarSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateSolarSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateSolarSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateSolarGsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGspRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateSolarGsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateSolarGsp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateSolarGsp(ctx, req.(*CreateGspRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetSolarSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetSolarSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetSolarSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetSolarSite(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetSolarGsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetSolarGsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetSolarGsp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetSolarGsp(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateSolarForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateSolarForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateSolarForecasts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateSolarForecasts(ctx, req.(*CreateForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreatePredictedGenerationValuesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictedGenerationValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreatePredictedGenerationValuesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreatePredictedGenerationValuesRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreatePredictedGenerationValuesRequest(ctx, req.(*CreatePredictedGenerationValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuartzAPI_ServiceDesc is the grpc.ServiceDesc for QuartzAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuartzAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fcfs.QuartzAPI",
	HandlerType: (*QuartzAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActualCrossSection",
			Handler:    _QuartzAPI_GetActualCrossSection_Handler,
		},
		{
			MethodName: "GetPredictedCrossSection",
			Handler:    _QuartzAPI_GetPredictedCrossSection_Handler,
		},
		{
			MethodName: "CreateSolarSite",
			Handler:    _QuartzAPI_CreateSolarSite_Handler,
		},
		{
			MethodName: "CreateSolarGsp",
			Handler:    _QuartzAPI_CreateSolarGsp_Handler,
		},
		{
			MethodName: "GetSolarSite",
			Handler:    _QuartzAPI_GetSolarSite_Handler,
		},
		{
			MethodName: "GetSolarGsp",
			Handler:    _QuartzAPI_GetSolarGsp_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _QuartzAPI_CreateModel_Handler,
		},
		{
			MethodName: "CreateSolarForecasts",
			Handler:    _QuartzAPI_CreateSolarForecasts_Handler,
		},
		{
			MethodName: "CreatePredictedGenerationValuesRequest",
			Handler:    _QuartzAPI_CreatePredictedGenerationValuesRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPredictedTimeseries",
			Handler:       _QuartzAPI_GetPredictedTimeseries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetActualTimeseries",
			Handler:       _QuartzAPI_GetActualTimeseries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fcfs/service.proto",
}
