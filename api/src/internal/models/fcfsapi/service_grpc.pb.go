// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fcfsapi/service.proto

package fcfsapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuartzAPI_GetPredictedTimeseries_FullMethodName       = "/fcfsapi.QuartzAPI/GetPredictedTimeseries"
	QuartzAPI_GetPredictedTimeseriesDeltas_FullMethodName = "/fcfsapi.QuartzAPI/GetPredictedTimeseriesDeltas"
	QuartzAPI_GetPredictedCrossSection_FullMethodName     = "/fcfsapi.QuartzAPI/GetPredictedCrossSection"
	QuartzAPI_GetObservedTimeseries_FullMethodName        = "/fcfsapi.QuartzAPI/GetObservedTimeseries"
	QuartzAPI_GetLatestForecast_FullMethodName            = "/fcfsapi.QuartzAPI/GetLatestForecast"
	QuartzAPI_GetLocationsAsGeoJSON_FullMethodName        = "/fcfsapi.QuartzAPI/GetLocationsAsGeoJSON"
	QuartzAPI_CreateSite_FullMethodName                   = "/fcfsapi.QuartzAPI/CreateSite"
	QuartzAPI_CreateGsp_FullMethodName                    = "/fcfsapi.QuartzAPI/CreateGsp"
	QuartzAPI_GetLocation_FullMethodName                  = "/fcfsapi.QuartzAPI/GetLocation"
	QuartzAPI_CreateModel_FullMethodName                  = "/fcfsapi.QuartzAPI/CreateModel"
	QuartzAPI_CreateForecast_FullMethodName               = "/fcfsapi.QuartzAPI/CreateForecast"
	QuartzAPI_CreateObserver_FullMethodName               = "/fcfsapi.QuartzAPI/CreateObserver"
	QuartzAPI_CreateObservations_FullMethodName           = "/fcfsapi.QuartzAPI/CreateObservations"
)

// QuartzAPIClient is the client API for QuartzAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuartzAPIClient interface {
	GetPredictedTimeseries(ctx context.Context, in *GetPredictedTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPredictedTimeseriesResponse], error)
	GetPredictedTimeseriesDeltas(ctx context.Context, in *GetPredictedTimeseriesDeltasRequest, opts ...grpc.CallOption) (*GetPredictedTimeseriesDeltasResponse, error)
	GetPredictedCrossSection(ctx context.Context, in *GetPredictedCrossSectionRequest, opts ...grpc.CallOption) (*GetPredictedCrossSectionResponse, error)
	GetObservedTimeseries(ctx context.Context, in *GetObservedTimeseriesRequest, opts ...grpc.CallOption) (*GetObservedTimeseriesResponse, error)
	GetLatestForecast(ctx context.Context, in *GetLatestForecastRequest, opts ...grpc.CallOption) (*GetLatestForecastResponse, error)
	GetLocationsAsGeoJSON(ctx context.Context, in *GetLocationsAsGeoJSONRequest, opts ...grpc.CallOption) (*GetLocationsAsGeoJSONResponse, error)
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	CreateGsp(ctx context.Context, in *CreateGspRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	CreateForecast(ctx context.Context, in *CreateForecastRequest, opts ...grpc.CallOption) (*CreateForecastResponse, error)
	CreateObserver(ctx context.Context, in *CreateObserverRequest, opts ...grpc.CallOption) (*CreateObserverResponse, error)
	CreateObservations(ctx context.Context, in *CreateObservationsRequest, opts ...grpc.CallOption) (*CreateObservationsResponse, error)
}

type quartzAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewQuartzAPIClient(cc grpc.ClientConnInterface) QuartzAPIClient {
	return &quartzAPIClient{cc}
}

func (c *quartzAPIClient) GetPredictedTimeseries(ctx context.Context, in *GetPredictedTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPredictedTimeseriesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuartzAPI_ServiceDesc.Streams[0], QuartzAPI_GetPredictedTimeseries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuartzAPI_GetPredictedTimeseriesClient = grpc.ServerStreamingClient[GetPredictedTimeseriesResponse]

func (c *quartzAPIClient) GetPredictedTimeseriesDeltas(ctx context.Context, in *GetPredictedTimeseriesDeltasRequest, opts ...grpc.CallOption) (*GetPredictedTimeseriesDeltasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPredictedTimeseriesDeltasResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetPredictedTimeseriesDeltas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetPredictedCrossSection(ctx context.Context, in *GetPredictedCrossSectionRequest, opts ...grpc.CallOption) (*GetPredictedCrossSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPredictedCrossSectionResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetPredictedCrossSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetObservedTimeseries(ctx context.Context, in *GetObservedTimeseriesRequest, opts ...grpc.CallOption) (*GetObservedTimeseriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObservedTimeseriesResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetObservedTimeseries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetLatestForecast(ctx context.Context, in *GetLatestForecastRequest, opts ...grpc.CallOption) (*GetLatestForecastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestForecastResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetLatestForecast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetLocationsAsGeoJSON(ctx context.Context, in *GetLocationsAsGeoJSONRequest, opts ...grpc.CallOption) (*GetLocationsAsGeoJSONResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationsAsGeoJSONResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetLocationsAsGeoJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateGsp(ctx context.Context, in *CreateGspRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateGsp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateForecast(ctx context.Context, in *CreateForecastRequest, opts ...grpc.CallOption) (*CreateForecastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateForecastResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateForecast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateObserver(ctx context.Context, in *CreateObserverRequest, opts ...grpc.CallOption) (*CreateObserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateObserverResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateObserver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quartzAPIClient) CreateObservations(ctx context.Context, in *CreateObservationsRequest, opts ...grpc.CallOption) (*CreateObservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateObservationsResponse)
	err := c.cc.Invoke(ctx, QuartzAPI_CreateObservations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuartzAPIServer is the server API for QuartzAPI service.
// All implementations should embed UnimplementedQuartzAPIServer
// for forward compatibility.
type QuartzAPIServer interface {
	GetPredictedTimeseries(*GetPredictedTimeseriesRequest, grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]) error
	GetPredictedTimeseriesDeltas(context.Context, *GetPredictedTimeseriesDeltasRequest) (*GetPredictedTimeseriesDeltasResponse, error)
	GetPredictedCrossSection(context.Context, *GetPredictedCrossSectionRequest) (*GetPredictedCrossSectionResponse, error)
	GetObservedTimeseries(context.Context, *GetObservedTimeseriesRequest) (*GetObservedTimeseriesResponse, error)
	GetLatestForecast(context.Context, *GetLatestForecastRequest) (*GetLatestForecastResponse, error)
	GetLocationsAsGeoJSON(context.Context, *GetLocationsAsGeoJSONRequest) (*GetLocationsAsGeoJSONResponse, error)
	CreateSite(context.Context, *CreateSiteRequest) (*CreateLocationResponse, error)
	CreateGsp(context.Context, *CreateGspRequest) (*CreateLocationResponse, error)
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	CreateForecast(context.Context, *CreateForecastRequest) (*CreateForecastResponse, error)
	CreateObserver(context.Context, *CreateObserverRequest) (*CreateObserverResponse, error)
	CreateObservations(context.Context, *CreateObservationsRequest) (*CreateObservationsResponse, error)
}

// UnimplementedQuartzAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuartzAPIServer struct{}

func (UnimplementedQuartzAPIServer) GetPredictedTimeseries(*GetPredictedTimeseriesRequest, grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPredictedTimeseries not implemented")
}
func (UnimplementedQuartzAPIServer) GetPredictedTimeseriesDeltas(context.Context, *GetPredictedTimeseriesDeltasRequest) (*GetPredictedTimeseriesDeltasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictedTimeseriesDeltas not implemented")
}
func (UnimplementedQuartzAPIServer) GetPredictedCrossSection(context.Context, *GetPredictedCrossSectionRequest) (*GetPredictedCrossSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictedCrossSection not implemented")
}
func (UnimplementedQuartzAPIServer) GetObservedTimeseries(context.Context, *GetObservedTimeseriesRequest) (*GetObservedTimeseriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObservedTimeseries not implemented")
}
func (UnimplementedQuartzAPIServer) GetLatestForecast(context.Context, *GetLatestForecastRequest) (*GetLatestForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestForecast not implemented")
}
func (UnimplementedQuartzAPIServer) GetLocationsAsGeoJSON(context.Context, *GetLocationsAsGeoJSONRequest) (*GetLocationsAsGeoJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationsAsGeoJSON not implemented")
}
func (UnimplementedQuartzAPIServer) CreateSite(context.Context, *CreateSiteRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSite not implemented")
}
func (UnimplementedQuartzAPIServer) CreateGsp(context.Context, *CreateGspRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGsp not implemented")
}
func (UnimplementedQuartzAPIServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedQuartzAPIServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedQuartzAPIServer) CreateForecast(context.Context, *CreateForecastRequest) (*CreateForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForecast not implemented")
}
func (UnimplementedQuartzAPIServer) CreateObserver(context.Context, *CreateObserverRequest) (*CreateObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObserver not implemented")
}
func (UnimplementedQuartzAPIServer) CreateObservations(context.Context, *CreateObservationsRequest) (*CreateObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObservations not implemented")
}
func (UnimplementedQuartzAPIServer) testEmbeddedByValue() {}

// UnsafeQuartzAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuartzAPIServer will
// result in compilation errors.
type UnsafeQuartzAPIServer interface {
	mustEmbedUnimplementedQuartzAPIServer()
}

func RegisterQuartzAPIServer(s grpc.ServiceRegistrar, srv QuartzAPIServer) {
	// If the following call pancis, it indicates UnimplementedQuartzAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuartzAPI_ServiceDesc, srv)
}

func _QuartzAPI_GetPredictedTimeseries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPredictedTimeseriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuartzAPIServer).GetPredictedTimeseries(m, &grpc.GenericServerStream[GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuartzAPI_GetPredictedTimeseriesServer = grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]

func _QuartzAPI_GetPredictedTimeseriesDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictedTimeseriesDeltasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetPredictedTimeseriesDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetPredictedTimeseriesDeltas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetPredictedTimeseriesDeltas(ctx, req.(*GetPredictedTimeseriesDeltasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetPredictedCrossSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictedCrossSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetPredictedCrossSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetPredictedCrossSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetPredictedCrossSection(ctx, req.(*GetPredictedCrossSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetObservedTimeseries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservedTimeseriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetObservedTimeseries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetObservedTimeseries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetObservedTimeseries(ctx, req.(*GetObservedTimeseriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetLatestForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetLatestForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetLatestForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetLatestForecast(ctx, req.(*GetLatestForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetLocationsAsGeoJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationsAsGeoJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetLocationsAsGeoJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetLocationsAsGeoJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetLocationsAsGeoJSON(ctx, req.(*GetLocationsAsGeoJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateGsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGspRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateGsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateGsp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateGsp(ctx, req.(*CreateGspRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateForecast(ctx, req.(*CreateForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateObserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateObserver(ctx, req.(*CreateObserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuartzAPI_CreateObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuartzAPIServer).CreateObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuartzAPI_CreateObservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuartzAPIServer).CreateObservations(ctx, req.(*CreateObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuartzAPI_ServiceDesc is the grpc.ServiceDesc for QuartzAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuartzAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fcfsapi.QuartzAPI",
	HandlerType: (*QuartzAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPredictedTimeseriesDeltas",
			Handler:    _QuartzAPI_GetPredictedTimeseriesDeltas_Handler,
		},
		{
			MethodName: "GetPredictedCrossSection",
			Handler:    _QuartzAPI_GetPredictedCrossSection_Handler,
		},
		{
			MethodName: "GetObservedTimeseries",
			Handler:    _QuartzAPI_GetObservedTimeseries_Handler,
		},
		{
			MethodName: "GetLatestForecast",
			Handler:    _QuartzAPI_GetLatestForecast_Handler,
		},
		{
			MethodName: "GetLocationsAsGeoJSON",
			Handler:    _QuartzAPI_GetLocationsAsGeoJSON_Handler,
		},
		{
			MethodName: "CreateSite",
			Handler:    _QuartzAPI_CreateSite_Handler,
		},
		{
			MethodName: "CreateGsp",
			Handler:    _QuartzAPI_CreateGsp_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _QuartzAPI_GetLocation_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _QuartzAPI_CreateModel_Handler,
		},
		{
			MethodName: "CreateForecast",
			Handler:    _QuartzAPI_CreateForecast_Handler,
		},
		{
			MethodName: "CreateObserver",
			Handler:    _QuartzAPI_CreateObserver_Handler,
		},
		{
			MethodName: "CreateObservations",
			Handler:    _QuartzAPI_CreateObservations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPredictedTimeseries",
			Handler:       _QuartzAPI_GetPredictedTimeseries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fcfsapi/service.proto",
}
