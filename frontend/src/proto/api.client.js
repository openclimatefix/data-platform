// @generated by protobuf-ts 2.9.1 with parameter output_javascript
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import { QuartzAPI } from "./api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service api.QuartzAPI
 */
export class QuartzAPIClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = QuartzAPI.typeName;
        this.methods = QuartzAPI.methods;
        this.options = QuartzAPI.options;
    }
    /**
     * Get a set of Predicted Yields as a timeseries per location
     *
     * @generated from protobuf rpc: GetPredictedTimeseries(api.GetPredictedTimeseriesRequest) returns (stream api.GetPredictedTimeseriesResponse);
     */
    getPredictedTimeseries(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Get a set of Actual Yields as a timeseries per location
     *
     * @generated from protobuf rpc: GetActualTimeseries(api.GetActualTimeseriesRequest) returns (stream api.GetActualTimeseriesResponse);
     */
    getActualTimeseries(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Get the predicted yield for a single timestamp across a set of locations
     *
     * @generated from protobuf rpc: GetActualCrossSection(api.GetActualCrossSectionRequest) returns (api.GetActualCrossSectionResponse);
     */
    getActualCrossSection(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Get the actual yield for a single timestamp across a set of locations
     *
     * @generated from protobuf rpc: GetPredictedCrossSection(api.GetPredictedCrossSectionRequest) returns (api.GetPredictedCrossSectionResponse);
     */
    getPredictedCrossSection(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Get the metadata for a single location
     *
     * @generated from protobuf rpc: GetLocationMetadata(api.GetLocationMetadataRequest) returns (api.GetLocationMetadataResponse);
     */
    getLocationMetadata(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
