/**
 * @fileoverview gRPC-Web generated client stub for api
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.4
// source: api.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.api = require('./api_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.QuartzAPIClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.QuartzAPIPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.GetPredictedTimeseriesRequest,
 *   !proto.api.GetPredictedTimeseriesResponse>}
 */
const methodDescriptor_QuartzAPI_GetPredictedTimeseries = new grpc.web.MethodDescriptor(
  '/api.QuartzAPI/GetPredictedTimeseries',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.api.GetPredictedTimeseriesRequest,
  proto.api.GetPredictedTimeseriesResponse,
  /**
   * @param {!proto.api.GetPredictedTimeseriesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.GetPredictedTimeseriesResponse.deserializeBinary
);


/**
 * @param {!proto.api.GetPredictedTimeseriesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.GetPredictedTimeseriesResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.QuartzAPIClient.prototype.getPredictedTimeseries =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.QuartzAPI/GetPredictedTimeseries',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetPredictedTimeseries);
};


/**
 * @param {!proto.api.GetPredictedTimeseriesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.GetPredictedTimeseriesResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.QuartzAPIPromiseClient.prototype.getPredictedTimeseries =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.QuartzAPI/GetPredictedTimeseries',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetPredictedTimeseries);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.GetActualTimeseriesRequest,
 *   !proto.api.GetActualTimeseriesResponse>}
 */
const methodDescriptor_QuartzAPI_GetActualTimeseries = new grpc.web.MethodDescriptor(
  '/api.QuartzAPI/GetActualTimeseries',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.api.GetActualTimeseriesRequest,
  proto.api.GetActualTimeseriesResponse,
  /**
   * @param {!proto.api.GetActualTimeseriesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.GetActualTimeseriesResponse.deserializeBinary
);


/**
 * @param {!proto.api.GetActualTimeseriesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.GetActualTimeseriesResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.QuartzAPIClient.prototype.getActualTimeseries =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.QuartzAPI/GetActualTimeseries',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetActualTimeseries);
};


/**
 * @param {!proto.api.GetActualTimeseriesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.GetActualTimeseriesResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.QuartzAPIPromiseClient.prototype.getActualTimeseries =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.QuartzAPI/GetActualTimeseries',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetActualTimeseries);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.GetActualCrossSectionRequest,
 *   !proto.api.GetActualCrossSectionResponse>}
 */
const methodDescriptor_QuartzAPI_GetActualCrossSection = new grpc.web.MethodDescriptor(
  '/api.QuartzAPI/GetActualCrossSection',
  grpc.web.MethodType.UNARY,
  proto.api.GetActualCrossSectionRequest,
  proto.api.GetActualCrossSectionResponse,
  /**
   * @param {!proto.api.GetActualCrossSectionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.GetActualCrossSectionResponse.deserializeBinary
);


/**
 * @param {!proto.api.GetActualCrossSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.GetActualCrossSectionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.GetActualCrossSectionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.QuartzAPIClient.prototype.getActualCrossSection =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.QuartzAPI/GetActualCrossSection',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetActualCrossSection,
      callback);
};


/**
 * @param {!proto.api.GetActualCrossSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.GetActualCrossSectionResponse>}
 *     Promise that resolves to the response
 */
proto.api.QuartzAPIPromiseClient.prototype.getActualCrossSection =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.QuartzAPI/GetActualCrossSection',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetActualCrossSection);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.GetPredictedCrossSectionRequest,
 *   !proto.api.GetPredictedCrossSectionResponse>}
 */
const methodDescriptor_QuartzAPI_GetPredictedCrossSection = new grpc.web.MethodDescriptor(
  '/api.QuartzAPI/GetPredictedCrossSection',
  grpc.web.MethodType.UNARY,
  proto.api.GetPredictedCrossSectionRequest,
  proto.api.GetPredictedCrossSectionResponse,
  /**
   * @param {!proto.api.GetPredictedCrossSectionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.GetPredictedCrossSectionResponse.deserializeBinary
);


/**
 * @param {!proto.api.GetPredictedCrossSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.GetPredictedCrossSectionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.GetPredictedCrossSectionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.QuartzAPIClient.prototype.getPredictedCrossSection =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.QuartzAPI/GetPredictedCrossSection',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetPredictedCrossSection,
      callback);
};


/**
 * @param {!proto.api.GetPredictedCrossSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.GetPredictedCrossSectionResponse>}
 *     Promise that resolves to the response
 */
proto.api.QuartzAPIPromiseClient.prototype.getPredictedCrossSection =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.QuartzAPI/GetPredictedCrossSection',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetPredictedCrossSection);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.GetLocationMetadataRequest,
 *   !proto.api.GetLocationMetadataResponse>}
 */
const methodDescriptor_QuartzAPI_GetLocationMetadata = new grpc.web.MethodDescriptor(
  '/api.QuartzAPI/GetLocationMetadata',
  grpc.web.MethodType.UNARY,
  proto.api.GetLocationMetadataRequest,
  proto.api.GetLocationMetadataResponse,
  /**
   * @param {!proto.api.GetLocationMetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.GetLocationMetadataResponse.deserializeBinary
);


/**
 * @param {!proto.api.GetLocationMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.GetLocationMetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.GetLocationMetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.QuartzAPIClient.prototype.getLocationMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.QuartzAPI/GetLocationMetadata',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetLocationMetadata,
      callback);
};


/**
 * @param {!proto.api.GetLocationMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.GetLocationMetadataResponse>}
 *     Promise that resolves to the response
 */
proto.api.QuartzAPIPromiseClient.prototype.getLocationMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.QuartzAPI/GetLocationMetadata',
      request,
      metadata || {},
      methodDescriptor_QuartzAPI_GetLocationMetadata);
};


module.exports = proto.api;

