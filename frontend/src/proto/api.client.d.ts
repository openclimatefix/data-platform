// @generated by protobuf-ts 2.9.1 with parameter output_javascript
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { GetLocationMetadataResponse } from "./api";
import type { GetLocationMetadataRequest } from "./api";
import type { GetPredictedCrossSectionResponse } from "./api";
import type { GetPredictedCrossSectionRequest } from "./api";
import type { GetActualCrossSectionResponse } from "./api";
import type { GetActualCrossSectionRequest } from "./api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { GetActualTimeseriesResponse } from "./api";
import type { GetActualTimeseriesRequest } from "./api";
import type { GetPredictedTimeseriesResponse } from "./api";
import type { GetPredictedTimeseriesRequest } from "./api";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service api.QuartzAPI
 */
export interface IQuartzAPIClient {
    /**
     * Get a set of Predicted Yields as a timeseries per location
     *
     * @generated from protobuf rpc: GetPredictedTimeseries(api.GetPredictedTimeseriesRequest) returns (stream api.GetPredictedTimeseriesResponse);
     */
    getPredictedTimeseries(input: GetPredictedTimeseriesRequest, options?: RpcOptions): ServerStreamingCall<GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse>;
    /**
     * Get a set of Actual Yields as a timeseries per location
     *
     * @generated from protobuf rpc: GetActualTimeseries(api.GetActualTimeseriesRequest) returns (stream api.GetActualTimeseriesResponse);
     */
    getActualTimeseries(input: GetActualTimeseriesRequest, options?: RpcOptions): ServerStreamingCall<GetActualTimeseriesRequest, GetActualTimeseriesResponse>;
    /**
     * Get the predicted yield for a single timestamp across a set of locations
     *
     * @generated from protobuf rpc: GetActualCrossSection(api.GetActualCrossSectionRequest) returns (api.GetActualCrossSectionResponse);
     */
    getActualCrossSection(input: GetActualCrossSectionRequest, options?: RpcOptions): UnaryCall<GetActualCrossSectionRequest, GetActualCrossSectionResponse>;
    /**
     * Get the actual yield for a single timestamp across a set of locations
     *
     * @generated from protobuf rpc: GetPredictedCrossSection(api.GetPredictedCrossSectionRequest) returns (api.GetPredictedCrossSectionResponse);
     */
    getPredictedCrossSection(input: GetPredictedCrossSectionRequest, options?: RpcOptions): UnaryCall<GetPredictedCrossSectionRequest, GetPredictedCrossSectionResponse>;
    /**
     * Get the metadata for a single location
     *
     * @generated from protobuf rpc: GetLocationMetadata(api.GetLocationMetadataRequest) returns (api.GetLocationMetadataResponse);
     */
    getLocationMetadata(input: GetLocationMetadataRequest, options?: RpcOptions): UnaryCall<GetLocationMetadataRequest, GetLocationMetadataResponse>;
}
/**
 * @generated from protobuf service api.QuartzAPI
 */
export declare class QuartzAPIClient implements IQuartzAPIClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * Get a set of Predicted Yields as a timeseries per location
     *
     * @generated from protobuf rpc: GetPredictedTimeseries(api.GetPredictedTimeseriesRequest) returns (stream api.GetPredictedTimeseriesResponse);
     */
    getPredictedTimeseries(input: GetPredictedTimeseriesRequest, options?: RpcOptions): ServerStreamingCall<GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse>;
    /**
     * Get a set of Actual Yields as a timeseries per location
     *
     * @generated from protobuf rpc: GetActualTimeseries(api.GetActualTimeseriesRequest) returns (stream api.GetActualTimeseriesResponse);
     */
    getActualTimeseries(input: GetActualTimeseriesRequest, options?: RpcOptions): ServerStreamingCall<GetActualTimeseriesRequest, GetActualTimeseriesResponse>;
    /**
     * Get the predicted yield for a single timestamp across a set of locations
     *
     * @generated from protobuf rpc: GetActualCrossSection(api.GetActualCrossSectionRequest) returns (api.GetActualCrossSectionResponse);
     */
    getActualCrossSection(input: GetActualCrossSectionRequest, options?: RpcOptions): UnaryCall<GetActualCrossSectionRequest, GetActualCrossSectionResponse>;
    /**
     * Get the actual yield for a single timestamp across a set of locations
     *
     * @generated from protobuf rpc: GetPredictedCrossSection(api.GetPredictedCrossSectionRequest) returns (api.GetPredictedCrossSectionResponse);
     */
    getPredictedCrossSection(input: GetPredictedCrossSectionRequest, options?: RpcOptions): UnaryCall<GetPredictedCrossSectionRequest, GetPredictedCrossSectionResponse>;
    /**
     * Get the metadata for a single location
     *
     * @generated from protobuf rpc: GetLocationMetadata(api.GetLocationMetadataRequest) returns (api.GetLocationMetadataResponse);
     */
    getLocationMetadata(input: GetLocationMetadataRequest, options?: RpcOptions): UnaryCall<GetLocationMetadataRequest, GetLocationMetadataResponse>;
}
