// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen

import (
	"context"
)

type Querier interface {
	// --- Forecasts ------------------------------------------------------------------------------
	CreateForecast(ctx context.Context, arg CreateForecastParams) (CreateForecastRow, error)
	// CreateForecastsUsingBatch inserts a new forecasts as a batch process.
	CreateForecastsUsingCopy(ctx context.Context, arg []CreateForecastsUsingCopyParams) *CreateForecastsUsingCopyBatchResults
	CreateLocation(ctx context.Context, arg CreateLocationParams) (CreateLocationRow, error)
	CreateLocationSource(ctx context.Context, arg CreateLocationSourceParams) (CreateLocationSourceRow, error)
	// CreateObservationsCopy inserts a batch of observations using postgres COPY protocol,
	// making it the fastest way to perform large inserts of observations.
	// Input yields are expected as 16-bit integers, with 0 representing 0%
	// and 30000 representing 100% of capacity.
	CreateObservationsAsInt16UsingCopy(ctx context.Context, arg []CreateObservationsAsInt16UsingCopyParams) (int64, error)
	CreateObserver(ctx context.Context, observerName string) (int32, error)
	CreatePredictionsAsInt16UsingCopy(ctx context.Context, arg []CreatePredictionsAsInt16UsingCopyParams) (int64, error)
	// --- Predictor ------------------------------------------------------------------------------
	CreatePredictor(ctx context.Context, arg CreatePredictorParams) (int32, error)
	DecomissionLocationSource(ctx context.Context, arg DecomissionLocationSourceParams) error
	GetLatestForecastAtHorizonSincePivot(ctx context.Context, arg GetLatestForecastAtHorizonSincePivotParams) (GetLatestForecastAtHorizonSincePivotRow, error)
	GetLocationById(ctx context.Context, locationID int32) (GetLocationByIdRow, error)
	GetLocationGeoJSONByIds(ctx context.Context, arg GetLocationGeoJSONByIdsParams) ([]byte, error)
	// Get latest active record via the UPPER(sys_period) IS NULL condition
	GetLocationSource(ctx context.Context, arg GetLocationSourceParams) (GetLocationSourceRow, error)
	// GetObservationsAsInt16 gets observations between two timestamps
	// and returns their values as 16-bit integers, with 0 representing 0%
	// and 30000 representing 100% of capacity. This is faster than converting the values to percentages.
	GetObservationsAsInt16Between(ctx context.Context, arg GetObservationsAsInt16BetweenParams) ([]GetObservationsAsInt16BetweenRow, error)
	GetObserverByName(ctx context.Context, observerName string) (ObsObserver, error)
	GetPredictorElseLatest(ctx context.Context, arg GetPredictorElseLatestParams) (PredPredictor, error)
	//- Queries for the locations table ------------------------------
	GetSourceTypeByName(ctx context.Context, sourceTypeName string) (LocSourceType, error)
	GetWeekAverageDeltasForLocations(ctx context.Context, arg GetWeekAverageDeltasForLocationsParams) ([]GetWeekAverageDeltasForLocationsRow, error)
	ListLocationGeometryByType(ctx context.Context, locationTypeName string) ([]ListLocationGeometryByTypeRow, error)
	ListLocationIdsByType(ctx context.Context, locationTypeName string) ([]ListLocationIdsByTypeRow, error)
	// ListLocationSourceHistory shows all the historical records for a given location and source type.
	ListLocationSourceHistory(ctx context.Context, arg ListLocationSourceHistoryParams) ([]ListLocationSourceHistoryRow, error)
	ListLocationsByType(ctx context.Context, locationTypeName string) ([]LocLocation, error)
	ListLocationsSources(ctx context.Context, arg ListLocationsSourcesParams) ([]ListLocationsSourcesRow, error)
	ListObservers(ctx context.Context) ([]ObsObserver, error)
	ListPredictionsAtTimeForLocations(ctx context.Context, arg ListPredictionsAtTimeForLocationsParams) ([]ListPredictionsAtTimeForLocationsRow, error)
	ListPredictionsForForecast(ctx context.Context, forecastID int32) ([]ListPredictionsForForecastRow, error)
	ListPredictionsForLocation(ctx context.Context, arg ListPredictionsForLocationParams) ([]ListPredictionsForLocationRow, error)
	ListPredictors(ctx context.Context) ([]PredPredictor, error)
	// UpdateLocationSource modifies an existing location source record.
	// Updates targeting tracked columns (capacity, capacity_unit_prefix_factor, capacity_limit, metadata)
	// create a new record instead of modifying the existing one.
	// Fields that want to remain unchanged should be set to their current values,
	// as the database cannot know if NULL is intended to be a new value or a flag to ignore the update.
	UpdateLocationSource(ctx context.Context, arg UpdateLocationSourceParams) error
}

var _ Querier = (*Queries)(nil)
