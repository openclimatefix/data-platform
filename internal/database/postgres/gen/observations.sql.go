// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: observations.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateObservationsAsInt16UsingCopyParams struct {
	LocationID         int32
	SourceTypeID       int16
	ObserverID         int32
	ObservationTimeUtc pgtype.Timestamp
	ValueSip           int16
}

const createObserver = `-- name: CreateObserver :one
INSERT INTO obs.observers (observer_name) VALUES ($1) RETURNING observer_id
`

func (q *Queries) CreateObserver(ctx context.Context, observerName string) (int32, error) {
	row := q.db.QueryRow(ctx, createObserver, observerName)
	var observer_id int32
	err := row.Scan(&observer_id)
	return observer_id, err
}

const getObservationsAsInt16Between = `-- name: GetObservationsAsInt16Between :many
SELECT
    location_id,
    source_type_id,
    observation_time_utc,
    value_sip
FROM obs.observed_generation_values
WHERE
    location_id = $1
    AND source_type_id = $2
    AND observer_id = $3
    AND observation_time_utc BETWEEN $4::timestamp AND $5::timestamp
`

type GetObservationsAsInt16BetweenParams struct {
	LocationID   int32
	SourceTypeID int16
	ObserverID   int32
	StartTimeUtc pgtype.Timestamp
	EndTimeUtc   pgtype.Timestamp
}

type GetObservationsAsInt16BetweenRow struct {
	LocationID         int32
	SourceTypeID       int16
	ObservationTimeUtc pgtype.Timestamp
	ValueSip           int16
}

// GetObservationsAsInt16 gets observations between two timestamps
// and returns their values as 16-bit integers, with 0 representing 0%
// and 30000 representing 100% of capacity. This is faster than converting the values to percentages.
func (q *Queries) GetObservationsAsInt16Between(ctx context.Context, arg GetObservationsAsInt16BetweenParams) ([]GetObservationsAsInt16BetweenRow, error) {
	rows, err := q.db.Query(ctx, getObservationsAsInt16Between,
		arg.LocationID,
		arg.SourceTypeID,
		arg.ObserverID,
		arg.StartTimeUtc,
		arg.EndTimeUtc,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetObservationsAsInt16BetweenRow{}
	for rows.Next() {
		var i GetObservationsAsInt16BetweenRow
		if err := rows.Scan(
			&i.LocationID,
			&i.SourceTypeID,
			&i.ObservationTimeUtc,
			&i.ValueSip,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObserverByName = `-- name: GetObserverByName :one
SELECT
    observer_id, observer_name
FROM obs.observers
WHERE observer_name = $1
`

func (q *Queries) GetObserverByName(ctx context.Context, observerName string) (ObsObserver, error) {
	row := q.db.QueryRow(ctx, getObserverByName, observerName)
	var i ObsObserver
	err := row.Scan(&i.ObserverID, &i.ObserverName)
	return i, err
}

const listObservers = `-- name: ListObservers :many
SELECT
    observer_id, observer_name
FROM obs.observers
`

func (q *Queries) ListObservers(ctx context.Context) ([]ObsObserver, error) {
	rows, err := q.db.Query(ctx, listObservers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ObsObserver{}
	for rows.Next() {
		var i ObsObserver
		if err := rows.Scan(&i.ObserverID, &i.ObserverName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
