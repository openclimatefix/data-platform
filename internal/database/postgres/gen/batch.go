// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package gen

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createForecastsUsingCopy = `-- name: CreateForecastsUsingCopy :batchone
INSERT INTO pred.forecasts(
    location_id, source_type_id, predictor_id, init_time_utc
) VALUES (
    $1, $2, $3, $4
) RETURNING source_type_id, forecast_id, location_id, predictor_id, init_time_utc
`

type CreateForecastsUsingCopyBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateForecastsUsingCopyParams struct {
	LocationID   int32
	SourceTypeID int16
	PredictorID  int32
	InitTimeUtc  pgtype.Timestamp
}

// CreateForecastsUsingBatch inserts a new forecasts as a batch process.
func (q *Queries) CreateForecastsUsingCopy(ctx context.Context, arg []CreateForecastsUsingCopyParams) *CreateForecastsUsingCopyBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.LocationID,
			a.SourceTypeID,
			a.PredictorID,
			a.InitTimeUtc,
		}
		batch.Queue(createForecastsUsingCopy, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateForecastsUsingCopyBatchResults{br, len(arg), false}
}

func (b *CreateForecastsUsingCopyBatchResults) QueryRow(f func(int, PredForecast, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i PredForecast
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.SourceTypeID,
			&i.ForecastID,
			&i.LocationID,
			&i.PredictorID,
			&i.InitTimeUtc,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *CreateForecastsUsingCopyBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
