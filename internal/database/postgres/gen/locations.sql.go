// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: locations.sql

package gen

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO loc.locations AS l (
    location_name, geom, location_type_id 
) VALUES (
    UPPER($1::text),
    ST_GeomFromText($2::text, 4326), --Ensure in WSG84
    (SELECT location_type_id FROM loc.location_types AS lt WHERE lt.location_type_name = UPPER($3::text))
) RETURNING l.location_id, l.location_name
`

type CreateLocationParams struct {
	LocationName     string
	Geom             string
	LocationTypeName string
}

type CreateLocationRow struct {
	LocationID   int32
	LocationName string
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (CreateLocationRow, error) {
	row := q.db.QueryRow(ctx, createLocation, arg.LocationName, arg.Geom, arg.LocationTypeName)
	var i CreateLocationRow
	err := row.Scan(&i.LocationID, &i.LocationName)
	return i, err
}

const createLocationSource = `-- name: CreateLocationSource :one
INSERT INTO loc.location_sources (
    location_id, source_type_id, capacity, capacity_unit_prefix_factor, capacity_limit_sip, metadata
) SELECT 
    $1, $2, $3, $4,
    $5::smallint,
    $6::json::jsonb
RETURNING record_id, capacity, capacity_unit_prefix_factor
`

type CreateLocationSourceParams struct {
	LocationID               int32
	SourceTypeID             int16
	Capacity                 int16
	CapacityUnitPrefixFactor int16
	CapacityLimitPercent     *int16
	Metadata                 []byte
}

type CreateLocationSourceRow struct {
	RecordID                 int32
	Capacity                 int16
	CapacityUnitPrefixFactor int16
}

func (q *Queries) CreateLocationSource(ctx context.Context, arg CreateLocationSourceParams) (CreateLocationSourceRow, error) {
	row := q.db.QueryRow(ctx, createLocationSource,
		arg.LocationID,
		arg.SourceTypeID,
		arg.Capacity,
		arg.CapacityUnitPrefixFactor,
		arg.CapacityLimitPercent,
		arg.Metadata,
	)
	var i CreateLocationSourceRow
	err := row.Scan(&i.RecordID, &i.Capacity, &i.CapacityUnitPrefixFactor)
	return i, err
}

const decomissionLocationSource = `-- name: DecomissionLocationSource :exec
DELETE FROM loc.location_sources
WHERE 
    location_id = $1
    AND source_type_id = $2
    AND UPPER(sys_period) IS NULL
`

type DecomissionLocationSourceParams struct {
	LocationID   int32
	SourceTypeID int16
}

func (q *Queries) DecomissionLocationSource(ctx context.Context, arg DecomissionLocationSourceParams) error {
	_, err := q.db.Exec(ctx, decomissionLocationSource, arg.LocationID, arg.SourceTypeID)
	return err
}

const getLocationById = `-- name: GetLocationById :one
SELECT 
    l.location_id,
    l.location_name,
    ST_AsText(l.geom)::text AS geom,
    (SELECT location_type_name FROM loc.location_types WHERE location_type_id = l.location_type_id) AS location_type_name,
    ST_Y(l.centroid)::real AS latitude,
    ST_X(l.centroid)::real AS longitude
FROM loc.locations AS l
WHERE l.location_id = $1
`

type GetLocationByIdRow struct {
	LocationID       int32
	LocationName     string
	Geom             string
	LocationTypeName string
	Latitude         float32
	Longitude        float32
}

func (q *Queries) GetLocationById(ctx context.Context, locationID int32) (GetLocationByIdRow, error) {
	row := q.db.QueryRow(ctx, getLocationById, locationID)
	var i GetLocationByIdRow
	err := row.Scan(
		&i.LocationID,
		&i.LocationName,
		&i.Geom,
		&i.LocationTypeName,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const getLocationGeoJSONByIds = `-- name: GetLocationGeoJSONByIds :one
SELECT json_build_object(
    'type', 'FeatureCollection',
    'features', json_agg(
        ST_AsGeoJSON(sl.*, id_column => 'location_id'::text, geom_column => 'geom_simple')::jsonb
    )
) AS geojson
FROM (
    SELECT 
        l.location_id,
        l.location_name,
        (SELECT location_type_name FROM loc.location_types WHERE location_type_id = l.location_type_id) AS location_type_name,
        ST_SimplifyPreserveTopology(l.geom, $1::real) AS geom_simple
    FROM loc.locations AS l
    WHERE l.location_id = ANY($2::int[])
) AS sl
`

type GetLocationGeoJSONByIdsParams struct {
	SimplificationLevel float32
	LocationIds         []int32
}

func (q *Queries) GetLocationGeoJSONByIds(ctx context.Context, arg GetLocationGeoJSONByIdsParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, getLocationGeoJSONByIds, arg.SimplificationLevel, arg.LocationIds)
	var geojson []byte
	err := row.Scan(&geojson)
	return geojson, err
}

const getLocationSource = `-- name: GetLocationSource :one
/*- Queries for the location_sources table ---------------------------
*/

SELECT
    ls.record_id,
    ls.capacity,
    ls.source_type_id,
    ls.capacity_unit_prefix_factor,
    ls.capacity_limit_sip,
    ls.metadata::json AS metadata,
    l.location_name,
    ST_Y(l.centroid)::real AS latitude,
    ST_X(l.centroid)::real AS longitude
FROM loc.location_sources AS ls
JOIN loc.source_types AS st ON ls.source_type_id = st.source_type_id
JOIN loc.locations AS l USING (location_id)
WHERE
    ls.location_id = $1
    AND st.source_type_name = UPPER($2::text)
    AND UPPER(ls.sys_period) IS NULL
`

type GetLocationSourceParams struct {
	LocationID     int32
	SourceTypeName string
}

type GetLocationSourceRow struct {
	RecordID                 int32
	Capacity                 int16
	SourceTypeID             int16
	CapacityUnitPrefixFactor int16
	CapacityLimitSip         *int16
	Metadata                 []byte
	LocationName             string
	Latitude                 float32
	Longitude                float32
}

// Get latest active record via the UPPER(sys_period) IS NULL condition
func (q *Queries) GetLocationSource(ctx context.Context, arg GetLocationSourceParams) (GetLocationSourceRow, error) {
	row := q.db.QueryRow(ctx, getLocationSource, arg.LocationID, arg.SourceTypeName)
	var i GetLocationSourceRow
	err := row.Scan(
		&i.RecordID,
		&i.Capacity,
		&i.SourceTypeID,
		&i.CapacityUnitPrefixFactor,
		&i.CapacityLimitSip,
		&i.Metadata,
		&i.LocationName,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const getSourceTypeByName = `-- name: GetSourceTypeByName :one

SELECT 
    source_type_id, source_type_name
FROM loc.source_types
WHERE source_type_name = UPPER($1::text)
`

// - Queries for the locations table ------------------------------
func (q *Queries) GetSourceTypeByName(ctx context.Context, sourceTypeName string) (LocSourceType, error) {
	row := q.db.QueryRow(ctx, getSourceTypeByName, sourceTypeName)
	var i LocSourceType
	err := row.Scan(&i.SourceTypeID, &i.SourceTypeName)
	return i, err
}

const listLocationGeometryByType = `-- name: ListLocationGeometryByType :many
SELECT
    location_name, ST_AsText(geom)
FROM loc.locations AS l
WHERE
    l.location_type_id = (
        SELECT location_type_id
        FROM loc.location_types
        WHERE location_type_name = UPPER($1::text)
    )
`

type ListLocationGeometryByTypeRow struct {
	LocationName string
	StAstext     interface{}
}

func (q *Queries) ListLocationGeometryByType(ctx context.Context, locationTypeName string) ([]ListLocationGeometryByTypeRow, error) {
	rows, err := q.db.Query(ctx, listLocationGeometryByType, locationTypeName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLocationGeometryByTypeRow{}
	for rows.Next() {
		var i ListLocationGeometryByTypeRow
		if err := rows.Scan(&i.LocationName, &i.StAstext); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocationIdsByType = `-- name: ListLocationIdsByType :many
SELECT
    location_id, location_name
FROM loc.locations AS l
WHERE
    l.location_type_id = (
        SELECT location_type_id
        FROM loc.location_types
        WHERE location_type_name = UPPER($1::text)
    )
ORDER BY l.location_id
`

type ListLocationIdsByTypeRow struct {
	LocationID   int32
	LocationName string
}

func (q *Queries) ListLocationIdsByType(ctx context.Context, locationTypeName string) ([]ListLocationIdsByTypeRow, error) {
	rows, err := q.db.Query(ctx, listLocationIdsByType, locationTypeName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLocationIdsByTypeRow{}
	for rows.Next() {
		var i ListLocationIdsByTypeRow
		if err := rows.Scan(&i.LocationID, &i.LocationName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocationSourceHistory = `-- name: ListLocationSourceHistory :many
SELECT
    capacity,
    capacity_unit_prefix_factor,
    LOWER(sys_period) AS valid_from,
    metadata
FROM loc.location_sources
WHERE 
    location_id = $1
    AND source_type_id = $2
    ORDER BY LOWER(sys_period) DESC
`

type ListLocationSourceHistoryParams struct {
	LocationID   int32
	SourceTypeID int16
}

type ListLocationSourceHistoryRow struct {
	Capacity                 int16
	CapacityUnitPrefixFactor int16
	ValidFrom                string
	Metadata                 []byte
}

// ListLocationSourceHistory shows all the historical records for a given location and source type.
func (q *Queries) ListLocationSourceHistory(ctx context.Context, arg ListLocationSourceHistoryParams) ([]ListLocationSourceHistoryRow, error) {
	rows, err := q.db.Query(ctx, listLocationSourceHistory, arg.LocationID, arg.SourceTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLocationSourceHistoryRow{}
	for rows.Next() {
		var i ListLocationSourceHistoryRow
		if err := rows.Scan(
			&i.Capacity,
			&i.CapacityUnitPrefixFactor,
			&i.ValidFrom,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocationsByType = `-- name: ListLocationsByType :many
SELECT
    location_id, location_name, geom, location_type_id, centroid, geom_hash
FROM loc.locations AS l
WHERE
    l.location_type_id = (
        SELECT location_type_id
        FROM loc.location_types
        WHERE location_type_name = UPPER($1::text)
    )
ORDER BY l.location_id
`

func (q *Queries) ListLocationsByType(ctx context.Context, locationTypeName string) ([]LocLocation, error) {
	rows, err := q.db.Query(ctx, listLocationsByType, locationTypeName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LocLocation{}
	for rows.Next() {
		var i LocLocation
		if err := rows.Scan(
			&i.LocationID,
			&i.LocationName,
			&i.Geom,
			&i.LocationTypeID,
			&i.Centroid,
			&i.GeomHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocationsSources = `-- name: ListLocationsSources :many
SELECT 
    location_id,
    capacity,
    capacity_unit_prefix_factor,
    capacity_limit_sip,
    metadata
FROM loc.location_sources
WHERE 
    location_id = ANY($2::integer[])
    AND source_type_id = $1
    AND UPPER(sys_period) IS NULL
`

type ListLocationsSourcesParams struct {
	SourceTypeID int16
	LocationIds  []int32
}

type ListLocationsSourcesRow struct {
	LocationID               int32
	Capacity                 int16
	CapacityUnitPrefixFactor int16
	CapacityLimitSip         *int16
	Metadata                 []byte
}

func (q *Queries) ListLocationsSources(ctx context.Context, arg ListLocationsSourcesParams) ([]ListLocationsSourcesRow, error) {
	rows, err := q.db.Query(ctx, listLocationsSources, arg.SourceTypeID, arg.LocationIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLocationsSourcesRow{}
	for rows.Next() {
		var i ListLocationsSourcesRow
		if err := rows.Scan(
			&i.LocationID,
			&i.Capacity,
			&i.CapacityUnitPrefixFactor,
			&i.CapacityLimitSip,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocationSource = `-- name: UpdateLocationSource :exec
UPDATE loc.location_sources SET
    capacity = $3,
    capacity_unit_prefix_factor = $4,
    capacity_limit_sip = $5,
    metadata = $6
WHERE 
    location_id = $1
    AND source_type_id = $2
    AND UPPER(sys_period) IS NULL
`

type UpdateLocationSourceParams struct {
	LocationID               int32
	SourceTypeID             int16
	Capacity                 int16
	CapacityUnitPrefixFactor int16
	CapacityLimitSip         *int16
	Metadata                 []byte
}

// UpdateLocationSource modifies an existing location source record.
// Updates targeting tracked columns (capacity, capacity_unit_prefix_factor, capacity_limit, metadata)
// create a new record instead of modifying the existing one.
// Fields that want to remain unchanged should be set to their current values,
// as the database cannot know if NULL is intended to be a new value or a flag to ignore the update.
func (q *Queries) UpdateLocationSource(ctx context.Context, arg UpdateLocationSourceParams) error {
	_, err := q.db.Exec(ctx, updateLocationSource,
		arg.LocationID,
		arg.SourceTypeID,
		arg.Capacity,
		arg.CapacityUnitPrefixFactor,
		arg.CapacityLimitSip,
		arg.Metadata,
	)
	return err
}
