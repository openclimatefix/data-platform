// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ocf/dp/dp.service.proto

package dp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataPlatformService_GetPredictedTimeseries_FullMethodName       = "/ocf.dp.DataPlatformService/GetPredictedTimeseries"
	DataPlatformService_GetPredictedTimeseriesDeltas_FullMethodName = "/ocf.dp.DataPlatformService/GetPredictedTimeseriesDeltas"
	DataPlatformService_GetPredictedCrossSection_FullMethodName     = "/ocf.dp.DataPlatformService/GetPredictedCrossSection"
	DataPlatformService_GetObservedTimeseries_FullMethodName        = "/ocf.dp.DataPlatformService/GetObservedTimeseries"
	DataPlatformService_GetLatestPredictions_FullMethodName         = "/ocf.dp.DataPlatformService/GetLatestPredictions"
	DataPlatformService_GetLocationsAsGeoJSON_FullMethodName        = "/ocf.dp.DataPlatformService/GetLocationsAsGeoJSON"
	DataPlatformService_CreateSite_FullMethodName                   = "/ocf.dp.DataPlatformService/CreateSite"
	DataPlatformService_CreateGsp_FullMethodName                    = "/ocf.dp.DataPlatformService/CreateGsp"
	DataPlatformService_GetLocation_FullMethodName                  = "/ocf.dp.DataPlatformService/GetLocation"
	DataPlatformService_CreateModel_FullMethodName                  = "/ocf.dp.DataPlatformService/CreateModel"
	DataPlatformService_CreateForecast_FullMethodName               = "/ocf.dp.DataPlatformService/CreateForecast"
	DataPlatformService_CreateObserver_FullMethodName               = "/ocf.dp.DataPlatformService/CreateObserver"
	DataPlatformService_CreateObservations_FullMethodName           = "/ocf.dp.DataPlatformService/CreateObservations"
	DataPlatformService_GetWeekAverageDeltas_FullMethodName         = "/ocf.dp.DataPlatformService/GetWeekAverageDeltas"
)

// DataPlatformServiceClient is the client API for DataPlatformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataPlatformServiceClient interface {
	// GetPredictedTimeseries fetches a horizontal slice of predicted data:
	// i.e. many points in time at a single location.
	GetPredictedTimeseries(ctx context.Context, in *GetPredictedTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPredictedTimeseriesResponse], error)
	// GetPredictedTimeseriesDeltas fetches a horizontal slice of data:
	// i.e. many points in time at a single location.
	// The deltas represent the difference between the predicted and observed value at each time.
	GetPredictedTimeseriesDeltas(ctx context.Context, in *GetPredictedTimeseriesDeltasRequest, opts ...grpc.CallOption) (*GetPredictedTimeseriesDeltasResponse, error)
	// GetPredictedCrossSection fetches a vertical slice of predicted data:
	// i.e. many locations at a single point in time.
	GetPredictedCrossSection(ctx context.Context, in *GetPredictedCrossSectionRequest, opts ...grpc.CallOption) (*GetPredictedCrossSectionResponse, error)
	// GetObservedTimeseries fetches a horizontal slice of observed data:
	// i.e. many points in time at a single location.
	GetObservedTimeseries(ctx context.Context, in *GetObservedTimeseriesRequest, opts ...grpc.CallOption) (*GetObservedTimeseriesResponse, error)
	GetLatestPredictions(ctx context.Context, in *GetLatestPredictionsRequest, opts ...grpc.CallOption) (*GetLatestPredictionsResponse, error)
	GetLocationsAsGeoJSON(ctx context.Context, in *GetLocationsAsGeoJSONRequest, opts ...grpc.CallOption) (*GetLocationsAsGeoJSONResponse, error)
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error)
	CreateGsp(ctx context.Context, in *CreateGspRequest, opts ...grpc.CallOption) (*CreateGspResponse, error)
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	CreateForecast(ctx context.Context, in *CreateForecastRequest, opts ...grpc.CallOption) (*CreateForecastResponse, error)
	CreateObserver(ctx context.Context, in *CreateObserverRequest, opts ...grpc.CallOption) (*CreateObserverResponse, error)
	CreateObservations(ctx context.Context, in *CreateObservationsRequest, opts ...grpc.CallOption) (*CreateObservationsResponse, error)
	GetWeekAverageDeltas(ctx context.Context, in *GetWeekAverageDeltasRequest, opts ...grpc.CallOption) (*GetWeekAverageDeltasResponse, error)
}

type dataPlatformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataPlatformServiceClient(cc grpc.ClientConnInterface) DataPlatformServiceClient {
	return &dataPlatformServiceClient{cc}
}

func (c *dataPlatformServiceClient) GetPredictedTimeseries(ctx context.Context, in *GetPredictedTimeseriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPredictedTimeseriesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataPlatformService_ServiceDesc.Streams[0], DataPlatformService_GetPredictedTimeseries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataPlatformService_GetPredictedTimeseriesClient = grpc.ServerStreamingClient[GetPredictedTimeseriesResponse]

func (c *dataPlatformServiceClient) GetPredictedTimeseriesDeltas(ctx context.Context, in *GetPredictedTimeseriesDeltasRequest, opts ...grpc.CallOption) (*GetPredictedTimeseriesDeltasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPredictedTimeseriesDeltasResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_GetPredictedTimeseriesDeltas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) GetPredictedCrossSection(ctx context.Context, in *GetPredictedCrossSectionRequest, opts ...grpc.CallOption) (*GetPredictedCrossSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPredictedCrossSectionResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_GetPredictedCrossSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) GetObservedTimeseries(ctx context.Context, in *GetObservedTimeseriesRequest, opts ...grpc.CallOption) (*GetObservedTimeseriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObservedTimeseriesResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_GetObservedTimeseries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) GetLatestPredictions(ctx context.Context, in *GetLatestPredictionsRequest, opts ...grpc.CallOption) (*GetLatestPredictionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestPredictionsResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_GetLatestPredictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) GetLocationsAsGeoJSON(ctx context.Context, in *GetLocationsAsGeoJSONRequest, opts ...grpc.CallOption) (*GetLocationsAsGeoJSONResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationsAsGeoJSONResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_GetLocationsAsGeoJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSiteResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_CreateSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) CreateGsp(ctx context.Context, in *CreateGspRequest, opts ...grpc.CallOption) (*CreateGspResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGspResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_CreateGsp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_CreateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) CreateForecast(ctx context.Context, in *CreateForecastRequest, opts ...grpc.CallOption) (*CreateForecastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateForecastResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_CreateForecast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) CreateObserver(ctx context.Context, in *CreateObserverRequest, opts ...grpc.CallOption) (*CreateObserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateObserverResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_CreateObserver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) CreateObservations(ctx context.Context, in *CreateObservationsRequest, opts ...grpc.CallOption) (*CreateObservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateObservationsResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_CreateObservations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPlatformServiceClient) GetWeekAverageDeltas(ctx context.Context, in *GetWeekAverageDeltasRequest, opts ...grpc.CallOption) (*GetWeekAverageDeltasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeekAverageDeltasResponse)
	err := c.cc.Invoke(ctx, DataPlatformService_GetWeekAverageDeltas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataPlatformServiceServer is the server API for DataPlatformService service.
// All implementations should embed UnimplementedDataPlatformServiceServer
// for forward compatibility.
type DataPlatformServiceServer interface {
	// GetPredictedTimeseries fetches a horizontal slice of predicted data:
	// i.e. many points in time at a single location.
	GetPredictedTimeseries(*GetPredictedTimeseriesRequest, grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]) error
	// GetPredictedTimeseriesDeltas fetches a horizontal slice of data:
	// i.e. many points in time at a single location.
	// The deltas represent the difference between the predicted and observed value at each time.
	GetPredictedTimeseriesDeltas(context.Context, *GetPredictedTimeseriesDeltasRequest) (*GetPredictedTimeseriesDeltasResponse, error)
	// GetPredictedCrossSection fetches a vertical slice of predicted data:
	// i.e. many locations at a single point in time.
	GetPredictedCrossSection(context.Context, *GetPredictedCrossSectionRequest) (*GetPredictedCrossSectionResponse, error)
	// GetObservedTimeseries fetches a horizontal slice of observed data:
	// i.e. many points in time at a single location.
	GetObservedTimeseries(context.Context, *GetObservedTimeseriesRequest) (*GetObservedTimeseriesResponse, error)
	GetLatestPredictions(context.Context, *GetLatestPredictionsRequest) (*GetLatestPredictionsResponse, error)
	GetLocationsAsGeoJSON(context.Context, *GetLocationsAsGeoJSONRequest) (*GetLocationsAsGeoJSONResponse, error)
	CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error)
	CreateGsp(context.Context, *CreateGspRequest) (*CreateGspResponse, error)
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	CreateForecast(context.Context, *CreateForecastRequest) (*CreateForecastResponse, error)
	CreateObserver(context.Context, *CreateObserverRequest) (*CreateObserverResponse, error)
	CreateObservations(context.Context, *CreateObservationsRequest) (*CreateObservationsResponse, error)
	GetWeekAverageDeltas(context.Context, *GetWeekAverageDeltasRequest) (*GetWeekAverageDeltasResponse, error)
}

// UnimplementedDataPlatformServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataPlatformServiceServer struct{}

func (UnimplementedDataPlatformServiceServer) GetPredictedTimeseries(*GetPredictedTimeseriesRequest, grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPredictedTimeseries not implemented")
}
func (UnimplementedDataPlatformServiceServer) GetPredictedTimeseriesDeltas(context.Context, *GetPredictedTimeseriesDeltasRequest) (*GetPredictedTimeseriesDeltasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictedTimeseriesDeltas not implemented")
}
func (UnimplementedDataPlatformServiceServer) GetPredictedCrossSection(context.Context, *GetPredictedCrossSectionRequest) (*GetPredictedCrossSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictedCrossSection not implemented")
}
func (UnimplementedDataPlatformServiceServer) GetObservedTimeseries(context.Context, *GetObservedTimeseriesRequest) (*GetObservedTimeseriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObservedTimeseries not implemented")
}
func (UnimplementedDataPlatformServiceServer) GetLatestPredictions(context.Context, *GetLatestPredictionsRequest) (*GetLatestPredictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestPredictions not implemented")
}
func (UnimplementedDataPlatformServiceServer) GetLocationsAsGeoJSON(context.Context, *GetLocationsAsGeoJSONRequest) (*GetLocationsAsGeoJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationsAsGeoJSON not implemented")
}
func (UnimplementedDataPlatformServiceServer) CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSite not implemented")
}
func (UnimplementedDataPlatformServiceServer) CreateGsp(context.Context, *CreateGspRequest) (*CreateGspResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGsp not implemented")
}
func (UnimplementedDataPlatformServiceServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedDataPlatformServiceServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedDataPlatformServiceServer) CreateForecast(context.Context, *CreateForecastRequest) (*CreateForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForecast not implemented")
}
func (UnimplementedDataPlatformServiceServer) CreateObserver(context.Context, *CreateObserverRequest) (*CreateObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObserver not implemented")
}
func (UnimplementedDataPlatformServiceServer) CreateObservations(context.Context, *CreateObservationsRequest) (*CreateObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObservations not implemented")
}
func (UnimplementedDataPlatformServiceServer) GetWeekAverageDeltas(context.Context, *GetWeekAverageDeltasRequest) (*GetWeekAverageDeltasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeekAverageDeltas not implemented")
}
func (UnimplementedDataPlatformServiceServer) testEmbeddedByValue() {}

// UnsafeDataPlatformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataPlatformServiceServer will
// result in compilation errors.
type UnsafeDataPlatformServiceServer interface {
	mustEmbedUnimplementedDataPlatformServiceServer()
}

func RegisterDataPlatformServiceServer(s grpc.ServiceRegistrar, srv DataPlatformServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataPlatformServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataPlatformService_ServiceDesc, srv)
}

func _DataPlatformService_GetPredictedTimeseries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPredictedTimeseriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataPlatformServiceServer).GetPredictedTimeseries(m, &grpc.GenericServerStream[GetPredictedTimeseriesRequest, GetPredictedTimeseriesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataPlatformService_GetPredictedTimeseriesServer = grpc.ServerStreamingServer[GetPredictedTimeseriesResponse]

func _DataPlatformService_GetPredictedTimeseriesDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictedTimeseriesDeltasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).GetPredictedTimeseriesDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_GetPredictedTimeseriesDeltas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).GetPredictedTimeseriesDeltas(ctx, req.(*GetPredictedTimeseriesDeltasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_GetPredictedCrossSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictedCrossSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).GetPredictedCrossSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_GetPredictedCrossSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).GetPredictedCrossSection(ctx, req.(*GetPredictedCrossSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_GetObservedTimeseries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservedTimeseriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).GetObservedTimeseries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_GetObservedTimeseries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).GetObservedTimeseries(ctx, req.(*GetObservedTimeseriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_GetLatestPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).GetLatestPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_GetLatestPredictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).GetLatestPredictions(ctx, req.(*GetLatestPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_GetLocationsAsGeoJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationsAsGeoJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).GetLocationsAsGeoJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_GetLocationsAsGeoJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).GetLocationsAsGeoJSON(ctx, req.(*GetLocationsAsGeoJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_CreateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).CreateSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_CreateGsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGspRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).CreateGsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_CreateGsp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).CreateGsp(ctx, req.(*CreateGspRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_CreateForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).CreateForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_CreateForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).CreateForecast(ctx, req.(*CreateForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_CreateObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).CreateObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_CreateObserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).CreateObserver(ctx, req.(*CreateObserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_CreateObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).CreateObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_CreateObservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).CreateObservations(ctx, req.(*CreateObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPlatformService_GetWeekAverageDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeekAverageDeltasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPlatformServiceServer).GetWeekAverageDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPlatformService_GetWeekAverageDeltas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPlatformServiceServer).GetWeekAverageDeltas(ctx, req.(*GetWeekAverageDeltasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataPlatformService_ServiceDesc is the grpc.ServiceDesc for DataPlatformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataPlatformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocf.dp.DataPlatformService",
	HandlerType: (*DataPlatformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPredictedTimeseriesDeltas",
			Handler:    _DataPlatformService_GetPredictedTimeseriesDeltas_Handler,
		},
		{
			MethodName: "GetPredictedCrossSection",
			Handler:    _DataPlatformService_GetPredictedCrossSection_Handler,
		},
		{
			MethodName: "GetObservedTimeseries",
			Handler:    _DataPlatformService_GetObservedTimeseries_Handler,
		},
		{
			MethodName: "GetLatestPredictions",
			Handler:    _DataPlatformService_GetLatestPredictions_Handler,
		},
		{
			MethodName: "GetLocationsAsGeoJSON",
			Handler:    _DataPlatformService_GetLocationsAsGeoJSON_Handler,
		},
		{
			MethodName: "CreateSite",
			Handler:    _DataPlatformService_CreateSite_Handler,
		},
		{
			MethodName: "CreateGsp",
			Handler:    _DataPlatformService_CreateGsp_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _DataPlatformService_GetLocation_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _DataPlatformService_CreateModel_Handler,
		},
		{
			MethodName: "CreateForecast",
			Handler:    _DataPlatformService_CreateForecast_Handler,
		},
		{
			MethodName: "CreateObserver",
			Handler:    _DataPlatformService_CreateObserver_Handler,
		},
		{
			MethodName: "CreateObservations",
			Handler:    _DataPlatformService_CreateObservations_Handler,
		},
		{
			MethodName: "GetWeekAverageDeltas",
			Handler:    _DataPlatformService_GetWeekAverageDeltas_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPredictedTimeseries",
			Handler:       _DataPlatformService_GetPredictedTimeseries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ocf/dp/dp.service.proto",
}
