// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package locations

import (
	"github.com/jackc/pgx/v5/pgtype"
)

// Energy sources
type LocEnergySource struct {
	// Unique identifier for energy source
	ID int16
	// Representation of the energy source
	Source string
}

// Supertype table for locations.
type LocLocation struct {
	// Primary key for the location.
	ID int32
	// Name of the location.
	Name string
	// Latitude associated with the location.
	Latitude float32
	// Longitude associated with the location.
	Longitude float32
	// Capacity of the location in kilowatts.
	CapacityKw int32
	// Type of location.
	LocationType int16
}

// Location subtypes
type LocLocationSubtype struct {
	// Unique identifier for subtype
	ID int16
	// Representation of the subtype
	Subtype string
}

type LocRegion struct {
	LocationID int32
	Name       string
	Latitude   float32
	Longitude  float32
	CapacityKw int32
	CreatedUtc pgtype.Timestamp
	RegionID   int32
}

// Subtype table for region-level locations.
//
//	These are bounded locations containing multiple sources such as DNOs or even whole countries.
//	The supertype lat/long refers to their center point.
type LocRegionMetadatum struct {
	// Primary key for the region.
	ID int32
	// Foreign key to the location table.
	LocationID int32
	CreatedUtc pgtype.Timestamp
	// Name of the region.
	RegionName string
	// GeoJSON representation of the region boundary.
	BoundaryGeojson []byte
}

type LocSite struct {
	LocationID   int32
	Name         string
	Latitude     float32
	Longitude    float32
	CapacityKw   int32
	SiteID       int32
	ClientName   string
	ClientSiteID string
	CreatedUtc   pgtype.Timestamp
}

// Subtype table for site-level locations.
//
//	These are typically single renewable generation sources identifiable via their lat/long.
type LocSiteMetadatum struct {
	// Primary key for the site.
	ID int32
	// Foreign key to the location table.
	LocationID int32
	// Name of the client associated with the site.
	ClientName string
	// ID of the site as given by the client.
	ClientSiteID string
	// Timestamp of the creation of the site.
	CreatedUtc pgtype.Timestamp
	// Yaw of the site in degrees (0: N, 90: E, 180: S, 270: W)
	YawDegrees *int16
	// Pitch of the site in degrees (0: Points directly downwards, 180: Points directly upwards)
	PitchDegrees *int16
	EnergySource int16
}

// Observed generation data.
type ObsObservation struct {
	// Unique identifier for the observation.
	ID int32
	// Location of the observed generation.
	LocationID int32
	// Time of the observation in UTC.
	TimeUtc pgtype.Timestamp
	// Observed generation value.
	Generation int16
	// Units of the observed generation.
	GenerationUnits int16
}

// Lookup table for power units.
type ObsPowerUnit struct {
	// Unique identifier for the unit
	ID int16
	// Representation of the unit
	Unit string
}

// Metadata for a forecast
type PredForecast struct {
	// Unique identifier for a forecast
	ID int32
	// Location the forecast is for
	LocationID int32
	// Time the forecast was created
	CreatedUtc pgtype.Timestamp
	// Initialization time of the forecast
	InitTimeUtc pgtype.Timestamp
	// Model used to generate the forecast
	ForecastModelID int32
}

// Model used to generate a forecast
type PredForecastModel struct {
	// Unique identifier for a forecast model
	ID int32
	// Name of the forecast model
	Name string
	// Version of the forecast model
	Version string
}

// Predicted generation values
type PredPredictedGeneration struct {
	// Unique identifier for a forecast
	ForecastID int32
	// Time horizon in mins for generation value
	HorizonMins int16
	// Predicted generation value
	Generation int16
	// Units of the generation value
	GenerationUnits int16
}
